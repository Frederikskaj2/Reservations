@inject ApiClient ApiClient

<Alert Color="Color.Success" Visible="@showPasswordUpdatedAlert" Dismisable="true">
    Din adgangskode blev skiftet.
    <CloseButton Clicked="@DismissPasswordUpdatedAlert" />
</Alert>
<Alert Color="Color.Danger" Visible="@showPasswordUpdatedErrorAlert" Dismisable="true">
    Der er sket en fejl, og din adgangskode blev ikke skiftet.
    <PasswordErrors PasswordTooShort="@passwordUpdatedErrors.HasFlag(UpdatePasswordErrorCodes.PasswordTooShort)"
                    PasswordRequiresLower="@passwordUpdatedErrors.HasFlag(UpdatePasswordErrorCodes.PasswordRequiresLower)"
                    PasswordRequiresUpper="@passwordUpdatedErrors.HasFlag(UpdatePasswordErrorCodes.PasswordRequiresUpper)"
                    PasswordRequiresDigit="@passwordUpdatedErrors.HasFlag(UpdatePasswordErrorCodes.PasswordRequiresDigit)"
                    PasswordRequiresNonAlphanumeric="@passwordUpdatedErrors.HasFlag(UpdatePasswordErrorCodes.PasswordRequiresNonAlphanumeric)"
                    PasswordRequiresUniqueChars="@passwordUpdatedErrors.HasFlag(UpdatePasswordErrorCodes.PasswordRequiresUniqueChars)" />
    <CloseButton Clicked="@DismissPasswordUpdatedErrorAlert" />
</Alert>
<Alert Color="Color.Success" Visible="@showSignedOutEverywhereAlert" Dismisable="true">
    Du blev logget ud alle andre steder.
    <CloseButton Clicked="@DismissSignedOutEverywhereAlert" />
</Alert>
<Alert Color="Color.Danger" Visible="@showSignedOutEverywhereErrorAlert" Dismisable="true">
    Der er sket en fejl, og du blev ikke logget ud alle andre steder.
    <CloseButton Clicked="@DismissSignedOutEverywhereErrorAlert" />
</Alert>
<Card Background="Background.Light">
    <Form onsubmit="return false;">
        <Validations @ref="validations" Mode="ValidationMode.Manual" Model="@request">
            <CardBody>
                <Field Horizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is4">Nuværende adgangskode</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is8">
                        <Validation>
                            <TextEdit Role="TextRole.Password" @bind-Text="@request.CurrentPassword">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Validation>
                    </FieldBody>
                </Field>
                <Field Horizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is4">Ny adgangskode</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is8">
                        <Validation>
                            <TextEdit Role="TextRole.Password" @bind-Text="@request.NewPassword">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Validation>
                    </FieldBody>
                </Field>
                <Field Horizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is4">Gentag adgangskode</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is8">
                        <Validation>
                            <TextEdit Role="TextRole.Password" @bind-Text="@request.ConfirmNewPassword">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Validation>
                    </FieldBody>
                </Field>
            </CardBody>
            <CardFooter>
                <Button Color="Color.Primary" Type="ButtonType.Submit" Clicked="@Submit">Skift adgangskode</Button>
                <Button Color="Color.Secondary" Clicked="@SignOutEverywhereElse">Log ud alle andre steder</Button>
            </CardFooter>
        </Validations>
    </Form>
</Card>

@code {

    private readonly UpdatePasswordRequest request = new UpdatePasswordRequest();
    private Validations validations = null!;
    private bool showPasswordUpdatedAlert;
    private bool showPasswordUpdatedErrorAlert;
    private UpdatePasswordErrorCodes passwordUpdatedErrors;
    private bool showSignedOutEverywhereAlert;
    private bool showSignedOutEverywhereErrorAlert;

    private async Task Submit()
    {
        if (!validations.ValidateAll())
            return;

        validations.ClearAll();
        DismissAllAlerts();

        var maybe = await ApiClient.PostJsonAsync<UpdatePasswordResponse>("user/update-password", request);
        if (maybe.TryGetValue(out var response))
        {
            if (!response.Errors.HasValue)
            {
                showPasswordUpdatedAlert = true;
                return;
            }
            passwordUpdatedErrors = response.Errors.Value;
        }
        showPasswordUpdatedErrorAlert = true;
    }

    private async Task SignOutEverywhereElse()
    {
        DismissAllAlerts();
        var maybe = await ApiClient.PostJsonAsync<OperationResponse>("user/sign-out-everywhere-else", null);
        if (!maybe.TryGetValue(out var response) || response.Result != OperationResult.Success)
            showSignedOutEverywhereErrorAlert = true;
        else
            showSignedOutEverywhereAlert = true;
    }

    private void DismissPasswordUpdatedAlert() => showPasswordUpdatedAlert = false;
    private void DismissPasswordUpdatedErrorAlert() => showPasswordUpdatedErrorAlert = false;
    private void DismissSignedOutEverywhereAlert() => showSignedOutEverywhereAlert = false;
    private void DismissSignedOutEverywhereErrorAlert() => showSignedOutEverywhereErrorAlert = false;

    private void DismissAllAlerts()
    {
        showPasswordUpdatedAlert = false;
        showPasswordUpdatedErrorAlert = false;
        showSignedOutEverywhereAlert = false;
        showSignedOutEverywhereErrorAlert = false;
    }
}