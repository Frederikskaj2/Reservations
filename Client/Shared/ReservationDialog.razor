@inject FormattingService FormattingService
@inject ReservationsOptions ReservationsOptions
@inject IReservationPolicyProvider ReservationPolicyProvider

<Modal @ref="@modal" Closed="@OnModalClosed">
    @if (Reservation?.Resource != null)
    {
        <ModalBackdrop />
        <ModalContent>
            <ModalHeader>
                <ModalTitle>Reservér @Reservation.Resource.Name</ModalTitle>
                <CloseButton Clicked="@Cancel" />
            </ModalHeader>
            <ModalBody>
                <Field IsHorizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is4">Fra</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is8">
                        <TextEdit IsPlaintext="true" Text="@GetCheckInTime()" />
                    </FieldBody>
                </Field>
                <Field IsHorizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is4">Antal dage</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is8">
                        <SelectEdit TValue="int" Value="@Reservation.DurationInDays" SelectedValueChanged="@DurationInDaysChanged">
                            @for (var i = MinimumDays; i <= MaximumDays; i += 1)
                            {
                                var localI = i;
                                <SelectItem Value="@localI">@localI</SelectItem>
                            }
                        </SelectEdit>
                    </FieldBody>
                </Field>
                <Field IsHorizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is4">Til</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is8">
                        <TextEdit IsPlaintext="true" Text="@GetCheckOutTime()" />
                    </FieldBody>
                </Field>
                <Field IsHorizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is4">Leje</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is8">
                        <TextEdit IsPlaintext="true" Text="@rent" />
                    </FieldBody>
                </Field>
                <Field IsHorizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is4">Depositum</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is8">
                        <TextEdit IsPlaintext="true" Text="@deposit" />
                    </FieldBody>
                </Field>
                <Field IsHorizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is4">Til betaling</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is8">
                        <TextEdit IsPlaintext="true" Text="@total" />
                    </FieldBody>
                </Field>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Primary" Clicked="@Confirm">Reservér</Button>
                <Button Color="Color.Secondary" Clicked="@Cancel">Annullér</Button>
            </ModalFooter>
        </ModalContent>
    }
</Modal>

@code {

    private Modal modal = null!;
    private IReservationPolicy? policy;
    private string rent = string.Empty;
    private string deposit = string.Empty;
    private string total = string.Empty;
    private bool isConfirming;

    [Parameter]
    public Reservation? Reservation { get; set; }

    [Parameter]
    public EventCallback OnReservationChanged { get; set; }

    [Parameter]
    public EventCallback OnConfirm { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    public int MinimumDays { get; set; } = 1;
    public int MaximumDays { get; set; } = 7;

    public void Show() => modal.Show();

    protected override async Task OnParametersSetAsync()
    {
        if (Reservation?.Resource != null)
            policy = ReservationPolicyProvider.GetPolicy(Reservation!.Resource.Type);
        await UpdatePrice();
    }

    private void Cancel() => modal.Hide();

    private void Confirm()
    {
        isConfirming = true;
        modal.Hide();
    }

    private Task OnModalClosed() => isConfirming ? OnConfirm.InvokeAsync(null) : OnCancel.InvokeAsync(null);

    private async Task DurationInDaysChanged(int value)
    {
        Reservation!.DurationInDays = value;
        await UpdatePrice();
        await OnReservationChanged.InvokeAsync(null);
    }

    private async Task UpdatePrice()
    {
        if (Reservation == null || policy == null)
            return;
        Reservation.Price = await policy.GetPrice(Reservation);
        rent = $"{FormattingService.FormatMoneyLong(Reservation.Price.Rent)} (inklusiv rengøring {FormattingService.FormatMoneyLong(Reservation.Price.CleaningFee)})";
        deposit = FormattingService.FormatMoneyLong(Reservation.Price.Deposit);
        total = FormattingService.FormatMoneyLong(Reservation.Price.Rent + Reservation.Price.CleaningFee + Reservation.Price.Deposit);
    }

    private string GetCheckInTime() => Reservation != null
        ? FormattingService.FormatCheckInTimeLong(Reservation.Date)
        : string.Empty;

    private string GetCheckOutTime() => Reservation != null
        ? FormattingService.FormatCheckOutTimeLong(Reservation.Date.PlusDays(Reservation.DurationInDays))
        : string.Empty;

}