@inject CultureInfo CultureInfo
@inject ReservationsOptions ReservationsOptions
@inject IReservationPolicyProvider ReservationPolicyProvider

<BSModal @ref="@modal">
    @if (Reservation?.Resource != null)
    {
        <BSModalHeader OnClick="@(() => modal.Hide())">Reservér @Reservation.Resource.Name</BSModalHeader>
        <BSModalBody>
            <BSBasicForm>
                <BSFormGroup IsRow="true">
                    <BSLabel For="reservation-check-in" SM="4">Fra</BSLabel>
                    <BSCol SM="8">
                        <BSBasicInput InputType="InputType.Text" IsDisabled="true" IsPlaintext="true" Id="reservation-check-in" Value="@GetCheckInTime()" />
                    </BSCol>
                </BSFormGroup>
                <BSFormGroup IsRow="true">
                    <BSLabel For="reservation-duration-in-days" SM="4">Antal dage</BSLabel>
                    <BSCol SM="8">
                        <select id="reservation-duration-in-days" class="form-control" @onchange="@DurationInDaysChanged">
                            @for (var i = MinimumDays; i <= MaximumDays; i += 1)
                            {
                                <option selected="@(i == Reservation.DurationInDays)">@i</option>
                            }
                        </select>
                    </BSCol>
                </BSFormGroup>
                <BSFormGroup IsRow="true">
                    <BSLabel For="reservation-check-out" SM="4">Til</BSLabel>
                    <BSCol SM="8">
                        <BSBasicInput InputType="InputType.Text" IsDisabled="true" IsPlaintext="true" Id="reservation-check-out" Value="@GetCheckOutTime()" />
                    </BSCol>
                </BSFormGroup>
                <BSFormGroup IsRow="true">
                    <BSLabel For="reservation-rent" SM="4">Leje</BSLabel>
                    <BSCol SM="8">
                        <BSBasicInput InputType="InputType.Text" IsDisabled="true" IsPlaintext="true" Id="reservation-rent" Value="@rent" />
                    </BSCol>
                </BSFormGroup>
                <BSFormGroup IsRow="true">
                    <BSLabel For="reservation-deposit" SM="4">Depositum</BSLabel>
                    <BSCol SM="8">
                        <BSBasicInput InputType="InputType.Text" IsDisabled="true" IsPlaintext="true" Id="reservation-deposit" Value="@deposit" />
                    </BSCol>
                </BSFormGroup>
                <BSFormGroup IsRow="true">
                    <BSLabel For="reservation-total" SM="4">Til betaling</BSLabel>
                    <BSCol SM="8">
                        <BSBasicInput InputType="InputType.Text" IsDisabled="true" IsPlaintext="true" Id="reservation-total" Value="@total" />
                    </BSCol>
                </BSFormGroup>
            </BSBasicForm>
        </BSModalBody>
        <BSModalFooter>
            <BSButton Color="Color.Primary" OnClick="@OnConfirm">Reservér</BSButton>
            <BSButton Color="Color.Secondary" OnClick="@OnCancel">Annullér</BSButton>
        </BSModalFooter>
    }
</BSModal>

@code {

    private BSModal modal = null!;
    private LocalDateTimePattern pattern = null!;
    private IReservationPolicy? policy;
    private string? rent;
    private string? deposit;
    private string? total;

    [Parameter]
    public ResourceReservation? Reservation { get; set; }

    [Parameter]
    public EventCallback OnConfirm { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    public int MinimumDays { get; set; } = 1;
    public int MaximumDays { get; set; } = 7;

    public void Show()
    {
        modal.Show();
    }

    public void Hide()
    {
        modal.Hide();
    }

    protected override void OnInitialized()
    {
        pattern = LocalDateTimePattern.Create("dddd 'den' d. MMMM yyyy 'kl.' HH:mm", CultureInfo);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Reservation?.Resource != null)
            policy = ReservationPolicyProvider.GetPolicy(Reservation!.Resource.Type);
        await UpdatePrice();
    }

    private async Task DurationInDaysChanged(ChangeEventArgs e)
    {
        Console.WriteLine("DurationInDaysChanged" + e.Value);
        if (int.TryParse((string) e.Value, NumberStyles.None, CultureInfo.InvariantCulture, out var durationInDays))
        {
            Reservation!.DurationInDays = durationInDays;
            Console.WriteLine("DurationInDays = " + durationInDays);
            await UpdatePrice();
        }
    }

    private async Task UpdatePrice()
    {
        Console.WriteLine("UpdatePrice");
        if (policy == null)
            return;
        var price = await policy.GetPrice(Reservation!);
        rent = $"{FormatPrice(price.Rent)} (inklusiv rengøring {FormatPrice(price.CleaningFee)})";
        deposit = FormatPrice(price.Deposit);
        total = FormatPrice(price.Rent + price.CleaningFee + price.Deposit);

        string FormatPrice(decimal value) => value.ToString("C0", CultureInfo);
    }

    private string GetCheckInTime() => Reservation == null ? string.Empty : FormatTime(Reservation.Date + ReservationsOptions.CheckInTime);

    private string GetCheckOutTime() => Reservation == null ? string.Empty : FormatTime(Reservation.Date.PlusDays(Reservation.DurationInDays) + ReservationsOptions.CheckOutTime);

    private string FormatTime(LocalDateTime time)
    {
        var formatted = pattern.Format(time);
        return CultureInfo.TextInfo.ToUpper(formatted[0]) + formatted.Substring(1);
    }

}
