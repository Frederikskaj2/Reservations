<Modal @ref="@modal" Closed="@OnModalClosed">
    <ModalBackdrop />
    <Form>
        <Validations @ref="validations" Mode="ValidationMode.Manual" Model="@request">
            <ModalContent>
                <ModalHeader>
                    <ModalTitle>
                        Udbetaling til @fullName
                    </ModalTitle>
                    <CloseButton Clicked="@Cancel"/>
                </ModalHeader>
                <ModalBody>
                    <Field Horizontal="true">
                        <FieldLabel ColumnSize="ColumnSize.Is4">Dato</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is8">
                            <Validation>
                                <DateEdit TValue="DateTime" Date="@dateTime" DateChanged="@DateChanged">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </DateEdit>
                            </Validation>
                        </FieldBody>
                    </Field>
                    <Field Horizontal="true">
                        <FieldLabel ColumnSize="ColumnSize.Is4">Beløb</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is8">
                            <Validation>
                                <NumericEdit @ref="amountNumericEdit" @bind-Value="request.Amount">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </NumericEdit>
                            </Validation>
                        </FieldBody>
                    </Field>
                </ModalBody>
                <ModalFooter>
                    <Button Color="Color.Primary" Type="ButtonType.Submit" PreventDefaultOnSubmit="true" Clicked="@Confirm">Registrér udbetaling</Button>
                    <Button Color="Color.Secondary" Clicked="@Cancel">Annullér</Button>
                </ModalFooter>
            </ModalContent>
        </Validations>
    </Form>
</Modal>

@code
{
    private readonly PayOutRequest request = new PayOutRequest();
    private Modal modal = null!;
    private Validations validations = null!;
    private NumericEdit<int> amountNumericEdit = null!;
    private int userId;
    private string? fullName;
    private DateTime dateTime;
    private bool isConfirming;

    [Parameter]
    public EventCallback<(int UserId, LocalDate Date, int Amount)> OnConfirm { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    public void Show(int userId, string fullName, LocalDate date, int amount)
    {
        this.userId = userId;
        this.fullName = fullName;
        request.Date = date;
        dateTime = date.AtMidnight().ToDateTimeUnspecified();
        request.Amount = amount;
        isConfirming = false;
        modal.Show();
        Task.Run(() => amountNumericEdit.Focus());
    }

    private void DateChanged(DateTime value)
    {
        dateTime = value;
        request.Date = LocalDate.FromDateTime(dateTime);
    }

    private void Cancel() => modal.Hide();

    private void Confirm()
    {
        Console.WriteLine("Confirming");
        Console.WriteLine($"Date: {dateTime}");
        Console.WriteLine($"Amount: {request.Amount}");
        if (!validations.ValidateAll())
        {
            Console.WriteLine("Validation failed");
            return;
        }

        Console.WriteLine("Validation succeeded");
        validations.ClearAll();
        isConfirming = true;
        modal.Hide();
    }

    private Task OnModalClosed() => isConfirming ? OnConfirm.InvokeAsync((userId, request.Date, request.Amount)) : OnCancel.InvokeAsync(null);
}