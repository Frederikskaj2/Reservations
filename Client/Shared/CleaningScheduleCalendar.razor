<div>
    <Select TValue="string" SelectedValue="@currentMonthValue" SelectedValueChanged="@MonthChanged" class="month-select">
        @foreach (var (_, value, text) in months!)
        {
            <SelectItem Value="@value">@text</SelectItem>
        }
    </Select>
    <div class="calendar">
        <div class="calendar-day-of-week-1 calendar-header">Mandag</div>
        <div class="calendar-day-of-week-2 calendar-header">Tirsdag</div>
        <div class="calendar-day-of-week-3 calendar-header">Onsdag</div>
        <div class="calendar-day-of-week-4 calendar-header">Torsdag</div>
        <div class="calendar-day-of-week-5 calendar-header">Fredag</div>
        <div class="calendar-day-of-week-6 calendar-header">Lørdag</div>
        <div class="calendar-day-of-week-7 calendar-header">Søndag</div>
        @{
            var dayOfWeek = 1;
            var date = firstCalendarDate;
            while (date <= lastCalendarDate)
            {
                var day = calendar![date];
                <div class="@GetCalendarDayClasses(day, dayOfWeek)">
                    <div class="calendar-day">@day.Date.Day</div>
                    @{
                        for (var i = 0; i < orderedResources!.Count; i += 1)
                        {
                            var resource = orderedResources[i];
                            var resourceClass = $"resource-{i + 1}";
                            var dayType = GetDayType(calendar![date.PlusDays(-1)], day, resource.ResourceId);
                            switch (dayType)
                            {
                                case DayType.Free:
                                    <div class="resource"></div>
                                    break;
                                case DayType.FreeReservation:
                                    <div class="resource"><span class="morning-noon"></span><span class="@resourceClass reserved afternoon"></span></div>
                                    break;
                                case DayType.Reservation:
                                    <div class="resource"><span class="@resourceClass reserved morning-noon-afternoon"></span></div>
                                    break;
                                case DayType.ReservationCleaningFree:
                                    <div class="resource"><span class="@resourceClass reserved morning"></span><span class="@resourceClass cleaning noon" title="@GetTooltip(day, resource.ResourceId)"></span></div>
                                    break;
                                case DayType.ReservationCleaning:
                                    <div class="resource"><span class="@resourceClass reserved morning"></span><span class="@resourceClass cleaning noon-afternoon" title="@GetTooltip(day, resource.ResourceId)"></span></div>
                                    break;
                                case DayType.ReservationCleaningReservation:
                                    <div class="resource"><span class="@resourceClass reserved morning"></span><span class="@resourceClass cleaning noon" title="@GetTooltip(day, resource.ResourceId)"></span><span class="@resourceClass reserved afternoon"></span></div>
                                    break;
                                case DayType.CleaningReservation:
                                    <div class="resource"><span class="@resourceClass cleaning morning-noon" title="@GetTooltip(day, resource.ResourceId)"></span><span class="@resourceClass reserved afternoon"></span></div>
                                    break;
                                case DayType.CleaningFree:
                                    <div class="resource"><span class="@resourceClass cleaning morning-noon" title="@GetTooltip(day, resource.ResourceId)"></span></div>
                                    break;
                                case DayType.Cleaning:
                                    <div class="resource"><span class="@resourceClass cleaning morning-noon-afternoon" title="@GetTooltip(day, resource.ResourceId)"></span></div>
                                    break;
                            }
                        }
                    }
                </div>
                date = date.PlusDays(1);
                dayOfWeek = dayOfWeek % 7 + 1;
            }
        }
    </div>
    <Form Class="legend">
        <Button Color="Color.Light" Clicked="@(() => UpdateCalendar(previousMonth ?? currentMonth))" style="@(!previousMonth.HasValue ? "visibility: hidden;" : string.Empty)">
            <Icon Class="fa-arrow-circle-left"/>
        </Button>
        @foreach (var (resourceId, _, _, name) in orderedResources!)
        {
            var classes = $"resource-{resourceId} cleaning";
            <span class="@classes">@name</span>
        }
        <Button Color="Color.Light" Clicked="@(() => UpdateCalendar(nextMonth ?? currentMonth))" style="@(!nextMonth.HasValue ? "visibility: hidden;" : string.Empty)">
            <Icon Class="fa-arrow-circle-right"/>
        </Button>
    </Form>
</div>
