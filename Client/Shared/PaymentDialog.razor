<Modal @ref="@modal" Closed="@OnModalClosed">
    <ModalBackdrop />
    <Form>
        <Validations @ref="validations" Mode="ValidationMode.Manual" Model="@request">
            <ModalContent>
                <ModalHeader>
                    <ModalTitle>
                        @if (isPayIn)
                        {
                            <text>Indbetaling vedr. bestilling @orderId</text>
                        }
                        else
                        {
                            <text>Udbetaling vedr. bestilling @orderId</text>
                        }
                    </ModalTitle>
                    <CloseButton Clicked="@Cancel"/>
                </ModalHeader>
                <ModalBody>
                    <Field Horizontal="true">
                        <FieldLabel ColumnSize="ColumnSize.Is4">Dato</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is8">
                            <Validation>
                                <DateEdit TValue="DateTime" Date="@date" DateChanged="@DateChanged">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </DateEdit>
                            </Validation>
                        </FieldBody>
                    </Field>
                    <Field Horizontal="true">
                        <FieldLabel ColumnSize="ColumnSize.Is4">Beløb</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is8">
                            <Validation>
                                <NumericEdit @ref="amountNumericEdit" @bind-Value="request.Amount">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </NumericEdit>
                            </Validation>
                        </FieldBody>
                    </Field>
                </ModalBody>
                <ModalFooter>
                    <Button Color="Color.Primary" Type="ButtonType.Submit" PreventDefaultOnSubmit="true" Clicked="@Confirm">
                        @if (isPayIn)
                        {
                            <text>Registrér indbetaling</text>
                        }
                        else
                        {
                            <text>Registrér udbetaling</text>
                        }
                    </Button>
                    <Button Color="Color.Secondary" Clicked="@Cancel">Annullér</Button>
                </ModalFooter>
            </ModalContent>
        </Validations>
    </Form>
</Modal>

@code {

    private readonly PaymentRequest request = new PaymentRequest();
    private Modal modal = null!;
    private Validations validations = null!;
    private NumericEdit<int> amountNumericEdit = null!;
    private int orderId;
    private DateTime date;
    private bool isPayIn;
    private bool isConfirming;

    [Parameter]
    public EventCallback<Payment> OnConfirm { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    public void Show(Payment payment)
    {
        orderId = payment.OrderId;
        request.Amount = payment.Amount;
        request.Date = payment.Date;
        date = payment.Date.AtMidnight().ToDateTimeUnspecified();
        isPayIn = payment.IsPayIn;
        isConfirming = false;
        modal.Show();
        Task.Run(() => amountNumericEdit.Focus());
    }

    private void DateChanged(DateTime value)
    {
        date = value;
        request.Date = LocalDate.FromDateTime(date);
    }

    private void Cancel() => modal.Hide();

    private void Confirm()
    {
        if (!validations.ValidateAll())
            return;

        validations.ClearAll();
        isConfirming = true;
        modal.Hide();
    }

    private Task OnModalClosed() => isConfirming ? OnConfirm.InvokeAsync(new Payment(orderId, request.Date, request.Amount, isPayIn)) : OnCancel.InvokeAsync(null);
}