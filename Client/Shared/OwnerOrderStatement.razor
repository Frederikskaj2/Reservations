@inject ClientDataProvider ClientDataProvider
@inject FormattingService FormattingService

<Form>
    <Table>
        <TableHeader>
            <TableRow>
                <TableHeaderCell Class="order-table-resource-column">Lokale</TableHeaderCell>
                <TableHeaderCell Class="order-table-time-column">Fra</TableHeaderCell>
                <TableHeaderCell Class="text-right">Dage</TableHeaderCell>
                <TableHeaderCell Class="order-table-time-column text-right">Til</TableHeaderCell>
            </TableRow>
        </TableHeader>
        <TableBody>
            @foreach (var reservation in Reservations ?? Enumerable.Empty<Reservation>())
            {
                var isCancelled = request.CancelledReservations.Contains(reservation.Id);
                <TableRow Class="@(isCancelled || reservation.Status == ReservationStatus.Cancelled ? "reservation-cancelled" : string.Empty)">
                    <TableRowCell>@resources![reservation.ResourceId].Name</TableRowCell>
                    <TableRowCell>@FormattingService.FormatCheckInTimeShort(reservation.Date)</TableRowCell>
                    <TableRowCell Class="text-right">@reservation.DurationInDays</TableRowCell>
                    <TableRowCell Class="text-right">@FormattingService.FormatCheckOutTimeShort(reservation.Date.PlusDays(reservation.DurationInDays))</TableRowCell>
                    <TableRowCell Class="border-0">
                        <Button Color="Color.Light" Size="ButtonSize.Small" Clicked="@(() => ToggleCancelReservation(reservation))">
                            @if (!request.CancelledReservations.Contains(reservation.Id))
                            {
                                <Icon Class="fa-trash text-danger" />
                            }
                            else
                            {
                                <Icon Class="fa-undo text-success" />
                            }
                        </Button>
                    </TableRowCell>
                </TableRow>
            }
        </TableBody>
        <TableFooter>
            <TableRow>
                <TableRowCell colspan="4" Class="border-top-0 text-right">
                    <Button Color="Color.Danger" Type="ButtonType.Submit" PreventDefaultOnSubmit="true" Disabled="@(request.CancelledReservations.Count == 0)" Clicked="@Submit">Opdatér bestilling</Button>
                </TableRowCell>
            </TableRow>
        </TableFooter>
    </Table>
</Form>

@code {

    private readonly UpdateOwnerOrderRequest request = new UpdateOwnerOrderRequest();
    private IReadOnlyDictionary<int, Resource>? resources;

    [Parameter]
    public int OrderId { get; set; }

    [Parameter]
    public IEnumerable<Reservation>? Reservations { get; set; }

    [Parameter]
    public EventCallback<UpdateOwnerOrderRequest> OnSubmit { get; set; }

    protected override async Task OnInitializedAsync()
    {
        resources = await ClientDataProvider.GetResources();
    }

    private void ToggleCancelReservation(Reservation reservation)
    {
        if (!request.CancelledReservations.Contains(reservation.Id))
            request.CancelledReservations.Add(reservation.Id);
        else
            request.CancelledReservations.Remove(reservation.Id);
    }

    private Task Submit() => OnSubmit.InvokeAsync(request);
}