<Modal @ref="@modal">
    <ModalBackdrop />
    <Form>
        <ModalContent>
            <ModalHeader>
                <ModalTitle>Redigér @user?.Email</ModalTitle>
                <CloseButton Clicked="@Cancel" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="validations" Mode="ValidationMode.Manual" Model="@request">
                    <Validation>
                        <Field>
                            <FieldLabel>Navn</FieldLabel>
                            <FieldBody>
                                <TextEdit @ref="nameTextEdit" @bind-Text="@request.FullName">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                            </FieldBody>
                        </Field>
                    </Validation>
                    <Validation>
                        <Field>
                            <FieldLabel>Telefon</FieldLabel>
                            <FieldBody>
                                <TextEdit @bind-Text="@request.Phone">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                            </FieldBody>
                        </Field>
                    </Validation>
                    <h2>Administrative adgange</h2>
                    <Paragraph>Bemærk at ændringer i disse først træder i kraft når brugeren logger ind næste gang. Hvis brugeren allerede er logget skal brugeren logge ud og ind igen.</Paragraph>
                    <Check TValue="bool" Checked="@request.Roles.Contains(Roles.OrderHandling)" CheckedChanged="@(isChecked => CheckRole(isChecked, Roles.OrderHandling))">
                        <ChildContent>
                            Bestillinger
                        </ChildContent>
                    </Check>
                    <Check TValue="bool" Checked="@request.Roles.Contains(Roles.Payment)" CheckedChanged="@(isChecked => CheckRole(isChecked, Roles.Payment))">
                        <ChildContent>
                            Betaling
                        </ChildContent>
                    </Check>
                    <Check TValue="bool" Checked="@request.Roles.Contains(Roles.Settlement)" CheckedChanged="@(isChecked => CheckRole(isChecked, Roles.Settlement))">
                        <ChildContent>
                            Opgørelse
                        </ChildContent>
                    </Check>
                    <Check TValue="bool" Checked="@request.Roles.Contains(Roles.Bookkeeping)" CheckedChanged="@(isChecked => CheckRole(isChecked, Roles.Bookkeeping))">
                        <ChildContent>
                            Bogføring
                        </ChildContent>
                    </Check>
                    <Check TValue="bool" Checked="@request.Roles.Contains(Roles.Cleaning)" CheckedChanged="@(isChecked => CheckRole(isChecked, Roles.Cleaning))">
                        <ChildContent>
                            Rengøring
                        </ChildContent>
                    </Check>
                    <Check TValue="bool" Checked="@request.Roles.Contains(Roles.LockBoxCodes)" CheckedChanged="@(isChecked => CheckRole(isChecked, Roles.LockBoxCodes))">
                        <ChildContent>
                            Nøglebokskoder
                        </ChildContent>
                    </Check>
                    <Check TValue="bool" Checked="@request.Roles.Contains(Roles.UserAdministration)" CheckedChanged="@(isChecked => CheckRole(isChecked, Roles.UserAdministration))" Disabled="@isCurrentUser">
                        <ChildContent>
                            Brugere
                        </ChildContent>
                    </Check>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Primary" Type="ButtonType.Submit" PreventDefaultOnSubmit="true" Clicked="@Confirm">Opdatér bruger</Button>
                <Button Color="Color.Secondary" Clicked="@Cancel">Annullér</Button>
            </ModalFooter>
        </ModalContent>
    </Form>
</Modal>

@code
{
    private readonly UpdateUserRequest request = new UpdateUserRequest();
    private Modal modal = null!;
    private TextEdit nameTextEdit = null!;
    private Validations validations = null!;
    private User? user;
    private bool isCurrentUser;

    [Parameter]
    public EventCallback<(int UserId, UpdateUserRequest Request)> OnConfirm { get; set; }

    public void Show(User user, bool isCurrentUser)
    {
        this.user = user;
        request.FullName = user.FullName!;
        request.Phone = user.Phone!;
        request.Roles = user.Roles!.ToHashSet();
        request.IsPendingDelete = user.IsPendingDelete;
        this.isCurrentUser = isCurrentUser;
        modal.Show();
        Task.Run(() => nameTextEdit.Focus());
    }

    private void CheckRole(bool isChecked, string role)
    {
        if (isChecked)
            request.Roles.Add(role);
        else
            request.Roles.Remove(role);
    }

    private Task Confirm()
    {
        if (!validations.ValidateAll())
            return Task.CompletedTask;

        validations.ClearAll();
        modal.Hide();
        var userId = user!.Id;
        user = null;
        return OnConfirm.InvokeAsync((userId, request));
    }

    private void Cancel()
    {
        modal.Hide();
        user = null;
    }
}