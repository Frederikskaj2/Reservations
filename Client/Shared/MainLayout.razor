@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthenticationStateProvider;

<nav>
    <NavLink href="" class="nav-tab" Match="NavLinkMatch.All">
        <div class="logo">Frederikskaj&nbsp;2</div>
    </NavLink>
    <NavLink href="@Urls.Calendar" class="nav-tab">
        <div>Kalender</div>
    </NavLink>
    <NavLink href="@Urls.MyOrders" class="nav-tab">
        <div>Mine bestillinger</div>
    </NavLink>
    @if (isAdministrator)
    {
        <NavLink href="@Urls.Orders" class="nav-tab nav-administrator">
            <div>Bestil­linger</div>
        </NavLink>
        <NavLink href="@Urls.PayOuts" class="nav-tab nav-administrator">
            <div>Ud­betaling</div>
        </NavLink>
        <NavLink href="@Urls.Postings" class="nav-tab nav-administrator">
            <div>Bog­føring</div>
        </NavLink>
        <NavLink href="@Urls.KeyCodes" class="nav-tab nav-administrator">
            <div>Nøgleboks­koder</div>
        </NavLink>
        <NavLink href="@Urls.HistoryReservations" class="nav-tab nav-administrator">
            <div>Historik</div>
        </NavLink>
        <NavLink href="@Urls.Users" class="nav-tab nav-administrator">
            <div>Brugere</div>
        </NavLink>
    }
    <CurrentUser />
</nav>
<div class="contents">
    @Body
</div>

@code {

    private bool isAdministrator;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isAdministrator = authenticationState.User.IsInRole(Roles.Administrator);
    }

    private async void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        var authenticationState = await task;
        isAdministrator = authenticationState.User.IsInRole(Roles.Administrator);
        StateHasChanged();
    }
}