@inject ApiClient ApiClient

<Alert Color="Color.Success" Visible="@showSuccessAlert" Dismisable="true">
    Dine mailabonnementer er blevet gemt.
    <CloseButton Clicked="@DismissSuccessAlert" />
</Alert>
<Alert Color="Color.Danger" Visible="@showErrorAlert" Dismisable="true">
    Der er sket en fejl, og dine mailabonnementer blev ikke gemt.
    <CloseButton Clicked="@DismissErrorAlert" />
</Alert>
<Card Background="Background.Light">
    <CardHeader>
        <CardTitle Size="1">Mailabonnementer</CardTitle>
    </CardHeader>
    <CardBody>
        <Form>
            @if (User.Roles.Contains(Roles.OrderHandling) || User.Roles.Contains(Roles.Payment))
            {
                <Check TValue="bool" Checked="@request.EmailSubscriptions.HasFlag(EmailSubscriptions.NewOrder)" CheckedChanged="@(isChecked => CheckSubscription(isChecked, EmailSubscriptions.NewOrder))">
                    <ChildContent>
                        Ny bestilling
                    </ChildContent>
                </Check>
                <Check TValue="bool" Checked="@request.EmailSubscriptions.HasFlag(EmailSubscriptions.OverduePayment)" CheckedChanged="@(isChecked => CheckSubscription(isChecked, EmailSubscriptions.OverduePayment))">
                    <ChildContent>
                        Manglende indbetaling
                    </ChildContent>
                </Check>
            }
            @if (User.Roles.Contains(Roles.Settlement))
            {
                <Check TValue="bool" Checked="@request.EmailSubscriptions.HasFlag(EmailSubscriptions.SettlementRequired)" CheckedChanged="@(isChecked => CheckSubscription(isChecked, EmailSubscriptions.SettlementRequired))">
                    <ChildContent>
                        Opgørelse af reservation
                    </ChildContent>
                </Check>
            }
            @if (User.Roles.Contains(Roles.Cleaning))
            {
                <Check TValue="bool" Checked="@request.EmailSubscriptions.HasFlag(EmailSubscriptions.CleaningScheduleUpdated)" CheckedChanged="@(isChecked => CheckSubscription(isChecked, EmailSubscriptions.CleaningScheduleUpdated))">
                    <ChildContent>
                        Ændring i rengøringsplan
                    </ChildContent>
                </Check>
            }
            <Button Color="Color.Primary" Type="ButtonType.Submit" PreventDefaultOnSubmit="true" class="btn-fixed float-right" Clicked="@UpdateMyUser">Opdatér</Button>
        </Form>
    </CardBody>
</Card>

@code
{
    private readonly UpdateMyUserRequest request = new UpdateMyUserRequest();
    private bool showSuccessAlert;
    private bool showErrorAlert;

    [Parameter]
    public MyUser User { get; set; } = null!;

    protected override void OnParametersSet()
    {
        request.FullName = User.FullName!;
        request.Phone = User.Phone!;
        request.EmailSubscriptions = User.EmailSubscriptions;
    }

    private void CheckSubscription(bool isChecked, EmailSubscriptions subscription)
    {
        if (isChecked)
            request.EmailSubscriptions |= subscription;
        else
            request.EmailSubscriptions &= ~subscription;
    }

    private async Task UpdateMyUser()
    {
        DismissAllAlerts();

        var problem = await ApiClient.Patch("user", request);
        if (problem == null)
            showSuccessAlert = true;
        else
            showErrorAlert = true;
    }

    private void DismissSuccessAlert() => showSuccessAlert = false;
    private void DismissErrorAlert() => showErrorAlert = false;

    private void DismissAllAlerts()
    {
        showSuccessAlert = false;
        showErrorAlert = false;
    }
}
