@page "/bestil"
@attribute [Authorize]
@inject ApiClient ApiClient
@inject ApplicationState ApplicationState
@inject ClientDataProvider ClientDataProvider
@inject FormattingService FormattingService
@inject NavigationManager NavigationManager

<main>
    @if (ClientDataProvider.DraftOrder.Reservations!.Count == 0)
    {
        <Container>
            <Paragraph>Gå til <a href="@Urls.Calendar">kalenderen</a> for at reservere et lokale.</Paragraph>
        </Container>
    }
    else if (!isInitialized)
    {
        <Spinner />
    }
    else
    {
        <Container class="container-min-md">
            <Alert Color="Color.Danger" IsShow="@showReservationConflictAlert">
                <CloseButton Clicked="@DismissReservationConflictAlert" />
                Din bestilling blev ikke gennemført da den overlapper med andre reservationer. Opdatér kalenderen og prøv igen.
            </Alert>
            <Alert Color="Color.Danger" IsShow="@showErrorAlert">
                <CloseButton Clicked="@DismissErrorAlert" />
                Der er sket en fejl. Din bestilling blev ikke gennemført.
            </Alert>
            <Validations @ref="validations" Mode="ValidationMode.Manual" Model="@ClientDataProvider.DraftOrder">
                <Field>
                    <FieldLabel>Din adresse</FieldLabel>
                    <FieldBody>
                        <Validation>
                            <SelectEdit TValue="int" @bind-SelectedValue="@ClientDataProvider.DraftOrder.Request.ApartmentId">
                                <ChildContent>
                                    <SelectItem Value="0" disabled>Vælg lejlighed</SelectItem>
                                    @foreach (var apartment in apartments!)
                                    {
                                        <SelectItem Value="@apartment.Id">@apartment</SelectItem>
                                    }
                                </ChildContent>
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </SelectEdit>
                        </Validation>
                    </FieldBody>
                </Field>
                <Field>
                    <FieldLabel>Kontonummer (til udbetaling af depositum)</FieldLabel>
                    <FieldBody>
                        <Validation>
                            <TextEdit InputMode="TextInputMode.Numeric" @bind-Text="@ClientDataProvider.DraftOrder.Request.AccountNumber" placeholder="1111-2222333344 eller DK1234567890123456">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Validation>
                    </FieldBody>
                </Field>
                <Table>
                    <TableHeader>
                        <TableRow>
                            <TableHeaderCell>Lokale</TableHeaderCell>
                            <TableHeaderCell>Fra</TableHeaderCell>
                            <TableHeaderCell>Dage</TableHeaderCell>
                            <TableHeaderCell>Til</TableHeaderCell>
                            <TableHeaderCell class="text-right">Leje</TableHeaderCell>
                            <TableHeaderCell class="text-right">Rengøring</TableHeaderCell>
                            <TableHeaderCell class="text-right">Depositum</TableHeaderCell>
                        </TableRow>
                    </TableHeader>
                    <TableBody>
                        @foreach (var reservation in ClientDataProvider.DraftOrder.Reservations)
                        {
                            <TableRow>
                                <TableRowCell>@reservation.Resource!.Name</TableRowCell>
                                <TableRowCell>@FormattingService.FormatCheckInTimeShort(reservation.Date)</TableRowCell>
                                <TableRowCell>@reservation.DurationInDays</TableRowCell>
                                <TableRowCell>@FormattingService.FormatCheckOutTimeShort(reservation.Date.PlusDays(reservation.DurationInDays))</TableRowCell>
                                <TableRowCell class="text-right">@FormattingService.FormatMoneyShort(reservation.Price!.Rent)</TableRowCell>
                                <TableRowCell class="text-right">@FormattingService.FormatMoneyShort(reservation.Price!.CleaningFee)</TableRowCell>
                                <TableRowCell class="text-right">@FormattingService.FormatMoneyShort(reservation.Price!.Deposit)</TableRowCell>
                            </TableRow>
                        }
                    </TableBody>
                    <TableFooter>
                        <TableRow>
                            <TableRowCell colspan="3" />
                            <TableRowCell colspan="3">Leje (inkl. rengøring)</TableRowCell>
                            <TableRowCell class="text-right">@FormattingService.FormatMoneyLong(GetTotalRentAndCleaningFee())</TableRowCell>
                        </TableRow>
                        <TableRow>
                            <TableRowCell colspan="3" class="border-top-0" />
                            <TableRowCell colspan="3" class="border-top-0">Depositum</TableRowCell>
                            <TableRowCell class="text-right border-top-0">@FormattingService.FormatMoneyLong(GetTotalDeposit())</TableRowCell>
                        </TableRow>
                        <TableRow>
                            <TableRowCell colspan="3" class="border-top-0" />
                            <TableRowCell colspan="3" class="border-bottom"><strong>Til betaling</strong></TableRowCell>
                            <TableRowCell class="text-right border-bottom"><strong>@FormattingService.FormatMoneyLong(GetGrandTotal())</strong></TableRowCell>
                        </TableRow>
                    </TableFooter>
                </Table>
                <Button class="float-right" Color="Color.Success" Clicked="@Submit">Bekræft bestilling</Button>
            </Validations>
        </Container>
    }
</main>

@code
{

    private Validations validations = null!;
    private IEnumerable<Apartment>? apartments;
    private bool isInitialized;
    private bool showReservationConflictAlert;
    private bool showErrorAlert;

    protected override async Task OnInitializedAsync()
    {
        apartments = await ClientDataProvider.GetApartments();
        var response = await ApiClient.GetJsonAsync<ApartmentResponse>("user/apartment");
        if (response.ApartmentId.HasValue)
            ClientDataProvider.DraftOrder.Request.ApartmentId = response.ApartmentId.Value;
        isInitialized = true;
    }

    private decimal GetTotalRentAndCleaningFee()
        => ClientDataProvider.DraftOrder.Reservations.Aggregate(decimal.Zero, (sum, reservation) => sum + reservation.Price!.Rent + reservation.Price!.CleaningFee);

    private decimal GetTotalDeposit()
        => ClientDataProvider.DraftOrder.Reservations.Aggregate(decimal.Zero, (sum, reservation) => sum + reservation.Price!.Deposit);

    private decimal GetGrandTotal()
        => ClientDataProvider.DraftOrder.Reservations.Aggregate(decimal.Zero, (sum, reservation) => sum + reservation.Price!.Rent + reservation.Price!.CleaningFee + reservation.Price!.Deposit);

    private async Task Submit()
    {
        if (!validations.ValidateAll())
            return;

        validations.ClearAll();

        ClientDataProvider.DraftOrder.PrepareRequest();
        var maybe = await ApiClient.PostJsonAsync<PlaceOrderResponse>("orders", ClientDataProvider.DraftOrder.Request);
        if (maybe.TryGetValue(out var response))
        {
            if (response.Result == PlaceOrderResult.Success)
            {
                ClientDataProvider.DraftOrder.Clear();
                ClientDataProvider.Refresh();
                NavigationManager.NavigateTo(Urls.Orders);
            }
            if (response.Result == PlaceOrderResult.ReservationConflict)
            {
                showReservationConflictAlert = true;
                return;
            }
        }
        showErrorAlert = true;
    }

    private void DismissReservationConflictAlert() => showReservationConflictAlert = false;

    private void DismissErrorAlert() => showErrorAlert = false;

}
