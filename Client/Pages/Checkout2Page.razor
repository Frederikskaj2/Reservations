@page "/bestil/2"
@attribute [Authorize]
@inject ApiClient ApiClient
@inject ApplicationState ApplicationState
@inject ClientDataProvider ClientDataProvider
@inject FormattingService FormattingService
@inject NavigationManager NavigationManager
@inject IReservationPolicyProvider ReservationPolicyProvider

<main>
    @if (ClientDataProvider.DraftOrder.Reservations!.Count == 0)
    {
        <Container>
            <Paragraph>Gå til <a href="@Urls.Calendar">kalenderen</a> for at reservere et lokale.</Paragraph>
        </Container>
    }
    else if (!isInitialized)
    {
        <Spinner />
    }
    else
    {
        <Container Class="container-min-md">
            <Alert Color="Color.Danger" Visible="@showErrorAlert" Dismisable="true">
                Der er sket en fejl, og din bestilling blev ikke gennemført.
                <CloseButton Clicked="@DismissErrorAlert" />
            </Alert>
            <h1>Din bestilling</h1>
            <Form>
                <Validations @ref="validations" Mode="ValidationMode.Manual" Model="@ClientDataProvider.DraftOrder">
                    <Text>@ClientDataProvider.DraftOrder.Request.FullName</Text>
                    <Text>Frederikskaj @apartments.First(a => a.Id == ClientDataProvider.DraftOrder.Request.ApartmentId)</Text>
                    <Text>Telefon: @ClientDataProvider.DraftOrder.Request.Phone</Text>
                    <Text>Kontonummer: @ClientDataProvider.DraftOrder.Request.AccountNumber</Text>
                    <Table>
                        <TableHeader>
                            <TableRow>
                                <TableHeaderCell Class="order-table-resource-column">Lokale</TableHeaderCell>
                                <TableHeaderCell Class="order-table-time-column">Fra</TableHeaderCell>
                                <TableHeaderCell>Dage</TableHeaderCell>
                                <TableHeaderCell Class="order-table-time-column">Til</TableHeaderCell>
                                <TableHeaderCell Class="text-right">Leje</TableHeaderCell>
                                <TableHeaderCell Class="text-right">Rengøring</TableHeaderCell>
                                <TableHeaderCell Class="text-right">Depositum</TableHeaderCell>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            @foreach (var reservation in ClientDataProvider.DraftOrder.Reservations)
                            {
                                <TableRow>
                                    <TableRowCell>@reservation.Resource!.Name</TableRowCell>
                                    <TableRowCell>@FormattingService.FormatCheckInTimeShort(reservation.Date)</TableRowCell>
                                    <TableRowCell>@reservation.DurationInDays</TableRowCell>
                                    <TableRowCell>@FormattingService.FormatCheckOutTimeShort(reservation.Date.PlusDays(reservation.DurationInDays))</TableRowCell>
                                    <TableRowCell Class="text-right">@FormattingService.FormatMoneyShort(reservation.Price!.Rent)</TableRowCell>
                                    <TableRowCell Class="text-right">@FormattingService.FormatMoneyShort(reservation.Price!.CleaningFee)</TableRowCell>
                                    <TableRowCell Class="text-right">@FormattingService.FormatMoneyShort(reservation.Price!.Deposit)</TableRowCell>
                                </TableRow>
                            }
                        </TableBody>
                        <TableFooter>
                            <TableRow>
                                <TableRowCell colspan="6">Leje (inkl. rengøring)</TableRowCell>
                                <TableRowCell Class="text-right">@FormattingService.FormatMoneyLong(GetTotalRentAndCleaningFee())</TableRowCell>
                            </TableRow>
                            <TableRow>
                                <TableRowCell colspan="6" Class="border-top-0">Depositum</TableRowCell>
                                <TableRowCell Class="text-right border-top-0">@FormattingService.FormatMoneyLong(GetTotalDeposit())</TableRowCell>
                            </TableRow>
                            <TableRow>
                                <TableRowCell colspan="6" Class="border-bottom"><strong>Til betaling</strong></TableRowCell>
                                <TableRowCell Class="text-right border-bottom"><strong>@FormattingService.FormatMoneyLong(GetGrandTotal())</strong></TableRowCell>
                            </TableRow>
                            <TableRow>
                                <TableRowCell colspan="7" Class="border-top-0">
                                    <Field>
                                        <Validation>
                                            <CheckEdit @bind-Checked="@ClientDataProvider.DraftOrder.Request.DidAcceptTerms">
                                                <ChildContent>
                                                    @if (linkBanquetFacilitiesRules && linkBedroomRules)
                                                    {
                                                        <text>Jeg accepterer <a href="lejebetingelser">lejebetingelserne</a> samt husorden for <a href="@Urls.RulesBanquetFacilities">aktivitets-/festlokalet</a> og <a href="@Urls.RulesBedrooms">soveværelserne</a>.</text>
                                                    }
                                                    else if (linkBanquetFacilitiesRules)
                                                    {
                                                        <text>Jeg accepterer <a href="lejebetingelser">lejebetingelserne</a> samt husorden for <a href="@Urls.RulesBanquetFacilities">aktivitets-/festlokalet</a>.</text>
                                                    }
                                                    else
                                                    {
                                                        <text>Jeg accepterer <a href="lejebetingelser">lejebetingelserne</a> samt husorden for <a href="@Urls.RulesBedrooms">soveværelserne</a>.</text>
                                                    }
                                                </ChildContent>
                                                <Feedback>
                                                    <ValidationError />
                                                </Feedback>
                                            </CheckEdit>
                                        </Validation>
                                    </Field>
                                    <Field>
                                        <Validation>
                                            <CheckEdit @bind-Checked="@ClientDataProvider.DraftOrder.Request.DidConsent">
                                                <ChildContent>
                                                    Jeg <a href="@Urls.Consent">samtykker</a> til at ovenstående oplysninger behandles af Grundejerforeningen Frederikskaj 2 med henblik på reservation af lokaler.
                                                </ChildContent>
                                                <Feedback>
                                                    <ValidationError />
                                                </Feedback>
                                            </CheckEdit>
                                        </Validation>
                                    </Field>
                                    <a Class="btn btn-secondary" href="javascript:history.back()">Tilbage</a>
                                    <Button Class="float-right" Color="Color.Success" Type="ButtonType.Submit" PreventDefaultOnSubmit="true" Clicked="@Submit">Bekræft bestilling</Button>
                                </TableRowCell>
                            </TableRow>
                        </TableFooter>
                    </Table>
                </Validations>
            </Form>
        </Container>
    }
</main>

@code
{

    private Validations validations = null!;
    private IEnumerable<Apartment>? apartments;
    private bool isInitialized;
    private bool linkBanquetFacilitiesRules;
    private bool linkBedroomRules;
    private bool showErrorAlert;

    protected override async Task OnInitializedAsync()
    {
        apartments = await ClientDataProvider.GetApartments();
        linkBanquetFacilitiesRules = ClientDataProvider.DraftOrder.Reservations.Any(reservation => reservation.Resource.Type == ResourceType.BanquetFacilities);
        linkBedroomRules = ClientDataProvider.DraftOrder.Reservations.Any(reservation => reservation.Resource.Type == ResourceType.Bedroom);
        ClientDataProvider.DraftOrder.Request.DidAcceptTerms = false;
        ClientDataProvider.DraftOrder.Request.DidConsent = false;
        isInitialized = true;
    }

    private int GetTotalRentAndCleaningFee()
        => ClientDataProvider.DraftOrder.Reservations.Aggregate(0, (sum, reservation) => sum + reservation.Price!.Rent + reservation.Price!.CleaningFee);

    private int GetTotalDeposit()
        => ClientDataProvider.DraftOrder.Reservations.Aggregate(0, (sum, reservation) => sum + reservation.Price!.Deposit);

    private int GetGrandTotal()
        => ClientDataProvider.DraftOrder.Reservations.Aggregate(0, (sum, reservation) => sum + reservation.Price!.Rent + reservation.Price!.CleaningFee + reservation.Price!.Deposit);

    private async Task Submit()
    {
        if (!validations.ValidateAll())
            return;

        validations.ClearAll();
        DismissErrorAlert();

        ClientDataProvider.DraftOrder.PrepareRequest();
        var maybe = await ApiClient.PostJsonAsync<PlaceOrderResponse>("my-orders", ClientDataProvider.DraftOrder.Request);
        if (maybe.TryGetValue(out var response))
        {
            if (response.Result == PlaceOrderResult.Success)
            {
                ApplicationState.MyOrder = response.Order;
                ClientDataProvider.DraftOrder.Clear();
                ClientDataProvider.Refresh();
                NavigationManager.NavigateTo(Urls.Checkout3);
            }
            if (response.Result == PlaceOrderResult.ReservationConflict)
            {
                try
                {
                    ClientDataProvider.Refresh();
                    var reservations = ClientDataProvider.DraftOrder.Reservations.ToList();
                    foreach (var reservation in reservations)
                    {
                        var policy = ReservationPolicyProvider.GetPolicy(reservation.Resource.Type);
                        var (minimumDays, maximumDays) = await policy.GetReservationAllowedNumberOfDays(reservation.Resource.Id, reservation.Date, false);
                        Console.WriteLine($"{reservation.Resource.Id} {reservation.Date} {reservation.DurationInDays} {minimumDays}-{maximumDays}");
                        if (!(minimumDays <= reservation.DurationInDays && reservation.DurationInDays <= maximumDays))
                        {
                            ClientDataProvider.DraftOrder.Reservations.Remove(reservation);
                            Console.WriteLine("Removed");
                        }
                    }
                }
                catch (Exception exception)
                {
                    Console.WriteLine(exception);
                    throw;
                }
                NavigationManager.NavigateTo(Urls.CheckoutConflict);
            }
        }
        showErrorAlert = true;
    }

    private void DismissErrorAlert() => showErrorAlert = false;
}
