@page "/posteringer"
@attribute [Authorize(Roles = Roles.Bookkeeping)]
@inject ApiClient ApiClient 
@inject ApplicationState ApplicationState
@inject CultureInfo CultureInfo
@inject FormattingService FormattingService
@inject ReservationsOptions ReservationsOptions
<main>
    @if (!isInitialized)
    {
        <Spinner />
    }
    else
    {
        <Container>
            <Alert Color="Color.Success" Visible="@showSuccessAlert" Dismisable="true">
                Posteringerne er blevet send til @email.
                <CloseButton Clicked="@DismissSuccessAlert" />
            </Alert>
            <Alert Color="Color.Danger" Visible="@showErrorAlert" Dismisable="true">
                Der er sket en fejl, og posteringerne blev ikke send til @email.
                <CloseButton Clicked="@DismissErrorAlert" />
            </Alert>
            <h1>Posteringer</h1>
            @if (postingsRange != null)
            {
                <Form>
                    <Row>
                        <Column ColumnSize="ColumnSize.IsThird">
                            <Field>
                                <FieldLabel>År</FieldLabel>
                                <FieldBody>
                                    <Select TValue="int" SelectedValue="@currentYear" SelectedValueChanged="@YearChanged">
                                        @foreach (var year in years!)
                                        {
                                            <SelectItem Value="@year">@year</SelectItem>
                                        }
                                    </Select>
                                </FieldBody>
                            </Field>
                        </Column>
                        <Column ColumnSize="ColumnSize.IsThird">
                            <Field>
                                <FieldLabel>Måned</FieldLabel>
                                <FieldBody>
                                    <Select TValue="int" SelectedValue="@currentMonth" SelectedValueChanged="@MonthChanged">
                                        @foreach (var month in months!)
                                        {
                                            <SelectItem Value="@month">@Capitalize(monthPattern!.Format(new LocalDate(currentYear, month, 1)))</SelectItem>
                                        }
                                    </Select>
                                </FieldBody>
                            </Field>
                        </Column>
                        <Column ColumnSize="ColumnSize.IsThird">
                            <Field>
                                <FieldBody>
                                    <Button Style="margin-top: 2rem;" Color="Color.Secondary" Type="ButtonType.Submit" Block="true" PreventDefaultOnSubmit="true" Clicked="@Send">Send posteringer som mail</Button>
                                </FieldBody>
                            </Field>
                        </Column>
                    </Row>
                </Form>
            }
            @if (!(postings?.Any() ?? false))
            {
                <Paragraph>Der er intet at vise.</Paragraph>
            }
            else
            {
                <Table>
                    <TableHeader>
                        <TableRow>
                            <TableHeaderCell>Dato</TableHeaderCell>
                            <TableHeaderCell>Beskrivelse</TableHeaderCell>
                            <TableHeaderCell Class="text-right">@AccountNames.Income</TableHeaderCell>
                            <TableHeaderCell Class="text-right">@AccountNames.Bank</TableHeaderCell>
                            <TableHeaderCell Class="text-right">@AccountNames.Deposits</TableHeaderCell>
                        </TableRow>
                    </TableHeader>
                    <TableBody>
                        @foreach (var posting in postings)
                        {
                            <TableRow>
                                <TableRowCell>@FormattingService.FormatDate(posting.Date)</TableRowCell>
                                <TableRowCell>
                                    @if (posting.Type == PostingType.PayIn)
                                    {
                                        <a href="@Urls.Orders/@posting.OrderId">Indbetaling fra @posting.FullName (bestillingsnr. @posting.OrderId)</a>
                                    }
                                    else
                                    {
                                        <text>Udbetaling til @posting.FullName</text>
                                    }
                                </TableRowCell>
                                <TableRowCell Class="text-right"><DebitCredit Amount="@posting.Income" /></TableRowCell>
                                <TableRowCell Class="text-right"><DebitCredit Amount="@posting.Bank" /></TableRowCell>
                                <TableRowCell Class="text-right"><DebitCredit Amount="@posting.Deposits" /></TableRowCell>
                            </TableRow>
                        }
                    </TableBody>
                </Table>
            }
        </Container>
    }
</main>

@code
{
    private LocalDatePattern? monthPattern;
    private PostingsRange? postingsRange;
    private List<int>? years;
    private List<int>? months;
    int currentYear;
    int currentMonth;
    private IEnumerable<Posting>? postings;
    private string? email;
    private bool isInitialized;
    private bool showSuccessAlert;
    private bool showErrorAlert;

    protected override async Task OnInitializedAsync()
    {
        monthPattern = LocalDatePattern.Create("MMMM", CultureInfo);

        await InitializeCalendar();
        await UpdatePostings();

        email = await ApplicationState.GetUserEmail();

        isInitialized = true;
    }

    private async Task InitializeCalendar()
    {
        var (response, problem) = await ApiClient.Get<PostingsRange>("postings/range");
        if (problem != null)
            return;
        postingsRange = response;
        var earliestYear = response!.EarliestMonth.Year;
        var latestYear = response.LatestMonth.Year;
        years = Enumerable.Range(earliestYear, latestYear - earliestYear + 1).ToList();
        currentYear = years[^1];
        UpdateMonths();
    }

    private async Task UpdatePostings()
    {
        var requestUri = $"postings?month={currentYear:0000}-{currentMonth:00}-01";
        var (response, problem) = await ApiClient.Get<IEnumerable<Posting>>(requestUri);
        if (problem == null)
            postings = response;
    }

    private Task YearChanged(int value)
    {
        currentYear = value;
        UpdateMonths();
        return UpdatePostings();
    }

    private Task MonthChanged(int value)
    {
        currentMonth = value;
        return UpdatePostings();
    }

    private void UpdateMonths()
    {
        months = GetMonths(currentYear).ToList();
        currentMonth = months[^1];
    }

    private IEnumerable<int> GetMonths(int year)
    {
        for (var month = 1; month <= 12; month += 1)
        {
            var date = new LocalDate(year, month, 1);
            if (postingsRange!.EarliestMonth <= date && date <= postingsRange.LatestMonth)
                yield return month;
        }
    }

    private string Capitalize(string text) => CultureInfo.TextInfo.ToUpper(text[0]) + text.Substring(1);

    private async Task Send()
    {
        DismissAllAlerts();

        var problem = await ApiClient.Post("postings/send");
        if (problem == null)
            showSuccessAlert = true;
        else
            showErrorAlert = true;
    }

    private void DismissSuccessAlert() => showSuccessAlert = false;

    private void DismissErrorAlert() => showErrorAlert = false;

    private void DismissAllAlerts()
    {
        DismissSuccessAlert();
        DismissErrorAlert();
    }
}