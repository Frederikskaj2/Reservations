@page "/bruger/bestillinger/{orderId:int}"
@attribute [Authorize]
@inject ApiClient ApiClient 
@inject IAuthenticationStateProvider AuthenticationStateProvider
@inject ClientDataProvider ClientDataProvider
@inject NavigationManager NavigationManager

<main>
    @if (!isInitialized)
    {
        <Spinner />
    }
    else if (order != null)
    {
        <Container class="container-min-md">
            <Alert Color="Color.Danger" Visible="@showErrorAlert" Dismisable="true">
                Der er sket en fejl, og din bestilling blev ikke opdateret.
                <CloseButton Clicked="@DismissErrorAlert" />
            </Alert>
            <h1>Bestilling @order!.Id</h1>
            @if (!order.IsHistoryOrder)
            {
                <div><a href="@Urls.Terms">Lejebetingelser</a></div>
                @if (linkBanquetFacilitiesRules)
                {
                    <div><a href="@Urls.RulesBanquetFacilities">Husorden for aktivitets-/festlokalet</a></div>
                }
                @if (linkBedroomRules)
                {
                    <div><a href="@Urls.RulesBedrooms">Husorden for soveværelserne</a></div>
                }
            }
            <OrderStatement @ref="orderStatement" OrderId="@order.Id" AccountNumber="@accountNumber" Reservations="@order.Reservations" Totals="@order.Totals" IsHistoryOrder="@order.IsHistoryOrder" OnSubmit="@Submit" />
        </Container>
    }
    else
    {
        <Container>
            <Text>Bestilling @OrderId er ikke tilgængelig.</Text>
        </Container>
    }
</main>

@code
{
    private OrderStatement orderStatement = null!;
    private string? accountNumber;
    private MyOrder? order;
    private bool linkBanquetFacilitiesRules;
    private bool linkBedroomRules;
    private bool isInitialized;
    private bool showErrorAlert;

    [Parameter]
    public int OrderId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetAccountNumber();

        var url = $"my-orders/{OrderId}";
        var (response, problem) = await ApiClient.Get<MyOrder>(url);
        if (problem == null)
        {
            order = response;
            var resources = await ClientDataProvider.GetResources();
            linkBanquetFacilitiesRules = order!.Reservations.Any(reservation => resources[reservation.ResourceId].Type == ResourceType.BanquetFacilities);
            linkBedroomRules = order.Reservations.Any(reservation => resources[reservation.ResourceId].Type == ResourceType.Bedroom);
        }
        isInitialized = true;
    }

    private async Task GetAccountNumber()
    {
        var (response, problem) = await ApiClient.Get<MyUser>("user");
        if (problem == null)
            accountNumber = response!.AccountNumber;
    }

    private async Task Submit(UpdateOrderRequest request)
    {
        var savedAccountNumber = request.AccountNumber;
        var isUpdatingCalendar = request.CancelledReservations.Count > 0;
        var url = $"my-orders/{order!.Id}";
        var (response, problem) = await ApiClient.Patch<OrderResponse<MyOrder>>(url, request);
        if (problem == null)
        {
            if (isUpdatingCalendar)
                ClientDataProvider.Refresh();
            if (response!.IsDeleted)
            {
                AuthenticationStateProvider.UpdateUser(AuthenticatedUser.UnknownUser);
                NavigationManager.NavigateTo(string.Empty);
            }
            order = response.Order;
            accountNumber = savedAccountNumber;
        }
        else
        {
            showErrorAlert = true;
        }
    }

    private void DismissErrorAlert() => showErrorAlert = false;
}