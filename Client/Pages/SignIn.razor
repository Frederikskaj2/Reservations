@page "/sign-in"
@inject ApplicationState ApplicationState
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject ServerAuthenticationStateProvider AuthenticationStateProvider

<div class="main">
    <p><a href="sign-up">Opret en ny bruger</a> hvis du ikke allerede har en bruger.</p>
    @if (signInResult == SignInResult.InvalidEmailOrPassword)
    {
        <div class="alert alert-danger fade show" role="alert">
            Forkert mail eller adgangskode. <a href="/user/send-password-reset-email">Vi kan sende dig en mail, så du kan få en ny adgangskode.</a>
            <button type="button" class="close" aria-label="Luk" @onclick="ClearErrorMessage">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
    }
    else if (signInResult == SignInResult.GeneralError)
    {
        <div class="alert alert-danger fade show" role="alert">
            Du blev ikke logget ind. Der skete en fejl.
            <button type="button" class="close" aria-label="Luk" @onclick="ClearErrorMessage">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
    }
    <EditForm Model="request" OnValidSubmit="Submit">
        <div class="form-group">
            <label>Mail:</label>
            <InputText class="form-control" type="email" @bind-Value="request.Email" />
            <small class="form-text text-muted"><ValidationMessage For="@(() => request.Email)" /></small>
        </div>
        <div class="form-group">
            <label>Adgangskode:</label>
            <InputText class="form-control" type="password" @bind-Value="request.Password" />
            <small class="form-text text-muted"><ValidationMessage For="@(() => request.Password)" /></small>
        </div>
        <div class="form-group">
            <InputCheckbox @bind-Value="request.IsPersistent" />
            <label class="form-check-label">Husk mig</label>
        </div>
        <button type="submit" class="btn btn-primary">
            Log ind
        </button>
        <DataAnnotationsValidator />
    </EditForm>
</div>

@code {

    private readonly SignInRequest request = new SignInRequest();
    private SignInResult signInResult;

    private async Task Submit()
    {
        ClearErrorMessage();
        var response = await HttpClient.PostJsonAsync<SignInResponse>("user/sign-in", request);
        if (response.Result == SignInResult.Success)
        {
            AuthenticationStateProvider.UpdateUser(response.User!);
            if (ApplicationState.RedirectUrl != null)
            {
                var redirectUrl = ApplicationState.RedirectUrl;
                ApplicationState.RedirectUrl = null;
                NavigationManager.NavigateTo(redirectUrl);
            }
        }
        else
            SetErrorMessage(response.Result);
    }

    private void ClearErrorMessage()
    {
        signInResult = default;
    }

    private void SetErrorMessage(SignInResult result)
    {
        signInResult = result;
    }

}
