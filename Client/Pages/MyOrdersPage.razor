@page "/bruger/bestillinger"
@inherits BasePage
@attribute [Authorize]
@inject ClientDataProvider ClientDataProvider
@inject FormattingService FormattingService
@inject NavigationManager NavigationManager

<main>
    @if (!isInitialized)
    {
        <Spinner />
    }
    else
    {
        <Container class="container-min-md">
            @if (orders!.Any())
            {
                <h1>Aktuelle bestillinger</h1>
                <Table>
                    <TableHeader>
                        <TableRow>
                            <TableHeaderCell>Bestillingsnr.</TableHeaderCell>
                            <TableHeaderCell Class="order-table-resource-column">Lokale</TableHeaderCell>
                            <TableHeaderCell Class="order-table-date-column">Dato</TableHeaderCell>
                            <TableHeaderCell>Nætter</TableHeaderCell>
                            <TableHeaderCell Class="order-table-status-column">Status</TableHeaderCell>
                            <TableHeaderCell></TableHeaderCell>
                        </TableRow>
                    </TableHeader>
                    <TableBody>
                        @foreach (var order in orders!)
                        {
                            var reservations = order.Reservations!.ToList();
                            for (var i = 0; i < reservations.Count; i += 1)
                            {
                                var isFirstReservation = i == 0;
                                var reservation = reservations[i];
                                <TableRow>
                                    <TableRowHeader Class="@(isFirstReservation ? "extra-border-top" : "border-top-0")">@(isFirstReservation ? @order.Id.ToString() : string.Empty)</TableRowHeader>
                                    <TableRowCell Class="@(isFirstReservation ? "extra-border-top" : string.Empty)">@resources![reservation.ResourceId].Name</TableRowCell>
                                    <TableRowCell Class="@(isFirstReservation ? "extra-border-top" : string.Empty)">@FormattingService.FormatDate(reservation.Date)</TableRowCell>
                                    <TableRowCell Class="@(isFirstReservation ? "extra-border-top" : string.Empty)">@reservation.DurationInDays</TableRowCell>
                                    <TableRowCell Class="@(isFirstReservation ? "extra-border-top" : string.Empty)">@GetReservationStatus(reservation)</TableRowCell>
                                    <TableRowCell Class="@(isFirstReservation ? "extra-border-top" : "border-top-0")">
                                        @if (isFirstReservation)
                                        {
                                            <Button Color="Color.Light" Size="ButtonSize.Small" Class="btn-fixed float-right" Clicked="@(() => EditOrder(order))">
                                                @if (order.CanBeEdited)
                                                {
                                                    <text>Redigér</text>
                                                }
                                                else
                                                {
                                                    <text>Vis</text>
                                                }
                                            </Button>
                                        }
                                    </TableRowCell>
                                </TableRow>
                            }
                        }
                    </TableBody>
                </Table>
            }
            @if (historyOrders!.Any())
            {
                <h1>Tidligere bestillinger</h1>
                <Table>
                    <TableHeader>
                        <TableRow>
                            <TableHeaderCell>Bestillingsnr.</TableHeaderCell>
                            <TableHeaderCell Class="order-table-resource-column">Lokale</TableHeaderCell>
                            <TableHeaderCell Class="order-table-date-column">Dato</TableHeaderCell>
                            <TableHeaderCell>Nætter</TableHeaderCell>
                            <TableHeaderCell Class="order-table-status-column">Status</TableHeaderCell>
                            <TableHeaderCell></TableHeaderCell>
                        </TableRow>
                    </TableHeader>
                    <TableBody>
                        @foreach (var order in historyOrders!)
                        {
                            var reservations = order.Reservations!.ToList();
                            for (var i = 0; i < reservations.Count; i += 1)
                            {
                                var isFirstReservation = i == 0;
                                var reservation = reservations[i];
                                <TableRow>
                                    <TableRowHeader Class="@(isFirstReservation ? "extra-border-top" : "border-top-0")">@(isFirstReservation ? @order.Id.ToString() : string.Empty)</TableRowHeader>
                                    <TableRowCell Class="@(isFirstReservation ? "extra-border-top" : string.Empty)">@resources![reservation.ResourceId].Name</TableRowCell>
                                    <TableRowCell Class="@(isFirstReservation ? "extra-border-top" : string.Empty)">@FormattingService.FormatDate(reservation.Date)</TableRowCell>
                                    <TableRowCell Class="@(isFirstReservation ? "extra-border-top" : string.Empty)">@reservation.DurationInDays</TableRowCell>
                                    <TableRowCell Class="@(isFirstReservation ? "extra-border-top" : string.Empty)">@GetReservationStatus(reservation)</TableRowCell>
                                    <TableRowCell Class="@(isFirstReservation ? "extra-border-top" : "border-top-0")">
                                        @if (isFirstReservation)
                                        {
                                            <Button Color="Color.Light" Size="ButtonSize.Small" Class="btn-fixed float-right" Clicked="@(() => EditOrder(order))">Vis</Button>
                                        }
                                    </TableRowCell>
                                </TableRow>
                            }
                        }
                    </TableBody>
                </Table>
            }
            @if (!orders!.Any() && !historyOrders!.Any())
            {
                <Paragraph>Gå til <a href="@Urls.Calendar">kalenderen</a> for at reservere af et lokale.</Paragraph>
            }
        </Container>
    }
</main>

@code
{
    private bool isInitialized;
    private IReadOnlyDictionary<int, Resource>? resources;
    private IEnumerable<MyOrder>? orders;
    private IEnumerable<MyOrder>? historyOrders;

    protected override async Task OnInitializedAsync()
    {
        resources = await ClientDataProvider.GetResources();
        var (response, problem) = await Get<IEnumerable<MyOrder>>("my-orders");
        if (problem == null)
        {
            orders = response.Where(order => !order.IsHistoryOrder).ToList();
            historyOrders = response.Where(order => order.IsHistoryOrder).ToList();
        }
        isInitialized = true;
    }

    private void EditOrder(MyOrder order)
    {
        var url = $"{Urls.MyOrders}/{order.Id}";
        NavigationManager.NavigateTo(url);
    }

    private static string GetReservationStatus(Reservation reservation) => reservation.Status switch
    {
        ReservationStatus.Reserved => "Afventer betaling",
        ReservationStatus.Confirmed => "Betalt",
        ReservationStatus.Cancelled => "Aflyst",
        ReservationStatus.Settled => "Opgjort",
        _ => "Ukendt"
    };
}