@page "/kalender"
@inject CultureInfo CultureInfo
@inject ClientDataProvider DataProvider
@inject IDateProvider DateProvider
@inject FormattingService FormattingService
@inject NavigationManager NavigationManager
@inject ReservationsOptions ReservationsOptions;
@inject IReservationPolicyProvider ReservationPolicyProvider

@if (!isInitialized)
{
    <main>
        <Spinner />
    </main>
}
else
{
    <main>
        <div class="calendar-container">
            <form>
                <div class="row">
                    <div class="col">
                        <select class="form-control" @onchange="MonthChanged">
                            @{
                                var isFirst = true;
                                foreach (var tuple in months!)
                                {
                                    <option value="@tuple.Date" selected="@isFirst">@tuple.Text</option>
                                    isFirst = false;
                                }
                            }
                        </select>
                    </div>
                    <div class="col">
                        <select class="form-control" @onchange="ResourceChanged">
                            @foreach (var resource in orderedResources!)
                            {
                                <option value="@resource.Id">@resource.Name</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <div class="legend-container">
                            @{
                                var resourceCounter = 1;
                                foreach (var resource in orderedResources!)
                                {
                                    <span class="legend-icon resource resource-reserved-other resource-@(resourceCounter++)"></span>
                                    <span class="legend-text@(resource.Id == currentResourceId ? " legend-selected-resource" : string.Empty)">@resource.Name</span>
                                }
                            }
                        </div>
                    </div>
                </div>
            </form>
            <div class="calendar">
                <div class="calendar-day-of-week-1 calendar-header">Mandag</div>
                <div class="calendar-day-of-week-2 calendar-header">Tirsdag</div>
                <div class="calendar-day-of-week-3 calendar-header">Onsdag</div>
                <div class="calendar-day-of-week-4 calendar-header">Torsdag</div>
                <div class="calendar-day-of-week-5 calendar-header">Fredag</div>
                <div class="calendar-day-of-week-6 calendar-header">Lørdag</div>
                <div class="calendar-day-of-week-7 calendar-header">Søndag</div>
                @{
                    var dayOfWeek = 1;
                    var date = firstCalendarDate;
                    while (date <= lastCalendarDate)
                    {
                        var day = calendar![date];
                        var localDate = date;
                        <div class="@GetCalendarDayClasses(day, dayOfWeek)" @onclick="@(() => MakeReservation(localDate))">
                            <div class="calendar-day">@day.Date.Day</div>
                            @{
                                resourceCounter = 1;
                                foreach (var classes in orderedResources!.Select(resource => GetResourceClasses(calendar[date.PlusDays(-1)], day, calendar[date.PlusDays(1)], resource.Id, resourceCounter++)))
                                {
                                    <div class="@classes"></div>
                                }
                            }
                        </div>
                        date = date.PlusDays(1);
                        dayOfWeek = dayOfWeek%7 + 1;
                    }
                }
            </div>
        </div>
    </main>
    <section class="sidebar">
        @if (DataProvider.DraftOrder.Reservations.Count > 0)
        {
            <div class="draft-order">
                <h1>Din bestilling</h1>
                @foreach (var reservation in DataProvider.DraftOrder.Reservations)
                {
                    <Card>
                        <CardBody>
                            <CardTitle>
                                <h2>@reservation.Resource.Name</h2>
                                <button type="button" class="close" @onclick="@(() => RemoveReservation(reservation))">
                                    <span>&times;</span>
                                </button>
                            </CardTitle>
                            <CardText>
                                <p>@FormattingService.FormatDate(reservation.Date) / @reservation.DurationInDays dag@(reservation.DurationInDays > 1 ? "e" : string.Empty)</p>
                                <Prices Price="@reservation.Price" />
                            </CardText>
                        </CardBody>
                    </Card>
                }
            </div>
        }
        else
        {
            <div class="draft-order">
                <p class="draft-order-get-started">Vælg lokale og en ledig dato for at reservere</p>
            </div>
        }
        <div class="draft-order-total @(DataProvider.DraftOrder.Reservations.Count > 0 ? "" : "hidden")">
            <Prices Price="@totalPrice" />
            <Button Color="Color.Success" Block="true" Clicked="@Checkout" tabindex="@(DataProvider.DraftOrder.Reservations.Count > 0 ? 0 : -1)">Bestil</Button>
        </div>
    </section>
    <ReservationDialog @ref="@reservationDialog" Reservation="@DataProvider.DraftOrder.DraftReservation" OnReservationChanged="ReservationChanged" OnCancel="@CancelReservation" OnConfirm="@ConfirmReservation" />
}

@code {

    private static readonly LocalDatePattern MonthPattern = LocalDatePattern.CreateWithInvariantCulture("yyyy-MM");
    private ReservationDialog reservationDialog = null!;
    private bool isInitialized;
    private List<(string Date, string Text)>? months;
    private LocalDate currentMonth;
    private IReadOnlyDictionary<int, Resource>? resources;
    private List<Resource>? orderedResources;
    private int currentResourceId;
    private Dictionary<LocalDate, Day>? calendar;
    private LocalDate firstCalendarDate;
    private LocalDate lastCalendarDate;
    private Price totalPrice = new Price();

    private async Task MonthChanged(ChangeEventArgs e) => await UpdateCalendar(ParseMonth(e.Value.ToString()), currentResourceId);

    private async Task ResourceChanged(ChangeEventArgs e) => await UpdateCalendar(currentMonth, int.Parse(e.Value.ToString()));

    protected override async Task OnInitializedAsync()
    {
        var pattern = LocalDatePattern.Create("MMMM yyyy", CultureInfo);
        months = GetMonths()
            .Select(date => (MonthPattern.Format(date), Capitalize(pattern.Format(date))))
            .ToList();

        resources = await DataProvider.GetResources();
        orderedResources = resources.Values.OrderBy(r => r.Sequence).ToList();

        await UpdateCalendar(ParseMonth(months[0].Date), orderedResources[0].Id);
        UpdateTotalPrice();

        isInitialized = true;

        string Capitalize(string text) => CultureInfo.TextInfo.ToUpper(text[0]) + text.Substring(1);
    }

    private IEnumerable<LocalDate> GetMonths()
    {
        var today = DateProvider.Today;
        var month = GetMonthStart(today);
        var endMonth = GetMonthStart(today.PlusDays(ReservationsOptions.ReservationIsNotAllowedAfterDaysFromNow));
        while (month <= endMonth)
        {
            yield return month;
            month = month.PlusMonths(1);
        }

        static LocalDate GetMonthStart(LocalDate d) => new LocalDate(d.Year, d.Month, 1);
    }

    private static LocalDate ParseMonth(string date) => MonthPattern.Parse(date).Value;

    private async Task UpdateCalendar(LocalDate month, int resourceId)
    {
        var today = DateProvider.Today;
        var firstMonday = GetPreviousMonday(month);
        var lastSunday = GetPreviousMonday(month.PlusMonths(1).PlusDays(-1)).PlusDays(6);

        var policy = ReservationPolicyProvider.GetPolicy(resources![resourceId].Type);
        var reservedDays = (await DataProvider.GetReservedDaysAndCacheResult(firstMonday.PlusDays(-1), lastSunday.PlusDays(1)))
            .GroupBy(day
                => day.Date,
                (key, reservations)
                    => (Date: key, ReservedResources: reservations.ToDictionary(reservation => reservation.ResourceId, reservation => reservation.IsMyReservation)))
            .ToDictionary(tuple => tuple.Date, tuple => tuple.ReservedResources);

        var days = new List<Day>();
        var date = firstMonday.PlusDays(-1);
        while (date <= lastSunday.PlusDays(1))
        {
            var isResourceAvailable = await policy.IsResourceAvailable(date, resourceId);
            var day = new Day
            {
                Date = date,
                IsToday = date == today,
                IsCurrentMonth = date.Month == month.Month,
                IsHighPriceDay = await DataProvider.IsHighPriceDay(date),
                IsResourceAvailable = isResourceAvailable,
            };
            if (reservedDays.TryGetValue(date, out var reservedResources))
                day.ReservedResources = reservedResources;
            days.Add(day);
            date = date.PlusDays(1);
        }
        currentMonth = month;
        currentResourceId = resourceId;
        calendar = days.ToDictionary(day => day.Date);
        firstCalendarDate = firstMonday;
        lastCalendarDate = lastSunday;

        static LocalDate GetPreviousMonday(LocalDate d)
        {
            var daysAfterMonday = ((int) d.DayOfWeek - 1)%7;
            return d.PlusDays(-daysAfterMonday);
        }
    }

    private static string GetCalendarDayClasses(Day day, int dayOfWeek)
    {
        return string.Join(' ', GetClasses());

        IEnumerable<string> GetClasses()
        {
            yield return $"calendar-day-of-week-{dayOfWeek}";
            if (day.IsToday)
                yield return "calendar-today";
            else if (!day.IsCurrentMonth)
                yield return "calendar-other-month";
            if (day.IsHighPriceDay)
                yield return "calendar-high-price";
            if (day.IsResourceAvailable)
                yield return "resource-available";
            else
                yield return "resource-unavailable";
        }
    }

    private string GetResourceClasses(Day previousDay, Day day, Day nextDay, int resourceId, int resourceNumber)
    {
        return string.Join(' ', GetClasses());

        IEnumerable<string> GetClasses()
        {

            yield return "resource";
            if (!day.ReservedResources.TryGetValue(resourceId, out var isMyReservation))
                yield break;
            if (isMyReservation)
                yield return "resource-reserved-me";
            else
                yield return "resource-reserved-other";
            yield return $"resource-{resourceNumber}";
            var hasAdjacentReservationBefore = previousDay.ReservedResources.ContainsKey(resourceId);
            if (hasAdjacentReservationBefore)
                yield return "resource-extend-left";
            var hasAdjacentReservationAfter = nextDay.ReservedResources.ContainsKey(resourceId);
            if (hasAdjacentReservationAfter)
                yield return "resource-extend-right";
            var isSelectedResource = resourceId == currentResourceId;
            if (!isSelectedResource)
                yield return "resource-not-current";
        }
    }

    private async Task MakeReservation(LocalDate date)
    {
        var resource = resources![currentResourceId];
        var policy = ReservationPolicyProvider.GetPolicy(resource.Type);
        var (minimumDays, maximumDays) = await policy.GetReservationAllowedNumberOfDays(resource.Id, date);
        reservationDialog.MinimumDays = minimumDays;
        reservationDialog.MaximumDays = maximumDays;
        DataProvider.DraftOrder.AddReservation(resource, date, minimumDays);
        await UpdateCalendar(currentMonth, currentResourceId);
        reservationDialog.Show();
    }

    private Task ReservationChanged() => UpdateCalendar(currentMonth, currentResourceId);

    private async Task CancelReservation()
    {
        DataProvider.DraftOrder.ClearDraftReservation();
        await UpdateCalendar(currentMonth, currentResourceId);
    }

    private async Task ConfirmReservation()
    {
        DataProvider.DraftOrder.AddDraftReservationToOrder();
        UpdateTotalPrice();
        await UpdateCalendar(currentMonth, currentResourceId);
    }

    private async Task RemoveReservation(DraftReservation reservation)
    {
        DataProvider.DraftOrder.RemoveReservation(reservation);
        UpdateTotalPrice();
        await UpdateCalendar(currentMonth, currentResourceId);
    }

    private void UpdateTotalPrice()
    {
        totalPrice = DataProvider.DraftOrder.Reservations.Aggregate(
            new Price(),
            (sum, reservation) => sum.Accumulate(reservation.Price!));
    }

    private void Checkout() => NavigationManager.NavigateTo(Urls.Checkout);

}