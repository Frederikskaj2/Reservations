@page "/kalender"
@inject ApplicationState ApplicationState
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject CultureInfo CultureInfo
@inject ClientDataProvider DataProvider
@inject IDateProvider DateProvider
@inject FormattingService FormattingService
@inject NavigationManager NavigationManager
@inject ReservationsOptions ReservationsOptions;
@inject IReservationPolicyProvider ReservationPolicyProvider

@if (!isInitialized)
{
    <main>
        <Spinner />
    </main>
}
else
{
    <main>
        <Row class="calendar-container">
            <Form>
                <Buttons>
                    @{
                        var resourceCounter = 1;
                        foreach (var resource in orderedResources!)
                        {
                            var isSelected = resource.Id == currentResourceId;
                            <Button Color="Color.Secondary" Outline="true" class="@(isSelected ? "legend-selected-resource" : string.Empty)" Clicked="@(() => SelectResource(resource.Id))">
                                <span class="legend-icon resource resource-reserved-other resource-@(resourceCounter++)"></span>
                                <span>@resource.Name</span>
                            </Button>
                        }
                    }
                </Buttons>
                <Select TValue="string" SelectedValue="@currentMonthValue" SelectedValueChanged="@MonthChanged">
                    @foreach (var tuple in months!)
                    {
                        <SelectItem Value="@tuple.Value">@tuple.Text</SelectItem>
                    }
                </Select>
            </Form>
            <div class="calendar">
                <div class="calendar-day-of-week-1 calendar-header">Mandag</div>
                <div class="calendar-day-of-week-2 calendar-header">Tirsdag</div>
                <div class="calendar-day-of-week-3 calendar-header">Onsdag</div>
                <div class="calendar-day-of-week-4 calendar-header">Torsdag</div>
                <div class="calendar-day-of-week-5 calendar-header">Fredag</div>
                <div class="calendar-day-of-week-6 calendar-header">Lørdag</div>
                <div class="calendar-day-of-week-7 calendar-header">Søndag</div>
                @{
                    var dayOfWeek = 1;
                    var date = firstCalendarDate;
                    while (date <= lastCalendarDate)
                    {
                        var day = calendar![date];
                        var localDate = date;
                        <div class="@GetCalendarDayClasses(day, dayOfWeek)" @onclick="@(() => MakeReservation(localDate))" tabindex="@(day.IsResourceAvailable ? "0" : string.Empty)" @onkeyup="@(e => KeyUp(e, localDate))" date="@localDate">
                            <div class="calendar-day">@day.Date.Day</div>
                            @{
                                var resourceCounter = 1;
                                foreach (var classes in orderedResources!.Select(resource => GetResourceClasses(calendar[date.PlusDays(-1)], day, calendar[date.PlusDays(1)], resource.Id, resourceCounter++)))
                                {
                                    <div class="@classes"></div>
                                }
                            }
                        </div>
                        date = date.PlusDays(1);
                        dayOfWeek = dayOfWeek%7 + 1;
                    }
                }
            </div>
            <Form class="legend">
                <Button Color="Color.Light" Clicked="@(() => SelectMonth(previousMonth ?? currentMonth))" style="@(!previousMonth.HasValue ? "visibility: hidden;" : string.Empty)">
                    <Icon class="fa-arrow-circle-left" />
                </Button>
                <span class="resource-reserved-other">Andres reservationer</span>
                <span class="resource-reserved-me">Dine reservationer</span>
                <Button Color="Color.Light" Clicked="@(() => SelectMonth(nextMonth ?? currentMonth))" style="@(!nextMonth.HasValue ? "visibility: hidden;" : string.Empty)">
                    <Icon class="fa-arrow-circle-right" />
                </Button>
            </Form>
        </Row>
    </main>
    <section class="sidebar">
        @if (DataProvider.DraftOrder.Reservations.Count > 0)
        {
            <div class="draft-order">
                <h1>Din bestilling</h1>
                @foreach (var reservation in DataProvider.DraftOrder.Reservations)
                {
                    <Card>
                        <CardBody>
                            <CardTitle>
                                <h2>@reservation.Resource.Name</h2>
                                <button type="button" class="close" @onclick="@(() => RemoveReservation(reservation))">
                                    <span>&times;</span>
                                </button>
                            </CardTitle>
                            <CardText>
                                <p>@FormattingService.FormatDate(reservation.Date) / @reservation.DurationInDays @(reservation.DurationInDays > 1 ? "nætter" : "nat")</p>
                                <Prices Price="@reservation.Price" />
                            </CardText>
                        </CardBody>
                    </Card>
                }
            </div>
        }
        else
        {
            <div class="draft-order">
                <p class="draft-order-get-started">Vælg lokale og en ledig dato for at reservere</p>
            </div>
        }
        <div class="draft-order-total @(DataProvider.DraftOrder.Reservations.Count > 0 ? "" : "hidden")">
            <Prices Price="@totalPrice" />
            <Button Color="Color.Success" Block="true" Clicked="@Checkout" tabindex="@(DataProvider.DraftOrder.Reservations.Count > 0 ? 0 : -1)">Bestil</Button>
            @if (canHandleOrders)
            {
                <Button Color="Color.Primary" Block="true" Clicked="@OwnerCheckout" tabindex="@(DataProvider.DraftOrder.Reservations.Count > 0 ? 0 : -1)">Reservér til grundejerforeningen</Button>
            }
        </div>
    </section>
    <ReservationDialog @ref="@reservationDialog" Reservation="@DataProvider.DraftOrder.DraftReservation" OnReservationChanged="ReservationChanged" OnCancel="@CancelReservation" OnConfirm="@ConfirmReservation" />
}

@code
{
    private static readonly LocalDatePattern MonthPattern = LocalDatePattern.CreateWithInvariantCulture("yyyy-MM");
    private ReservationDialog reservationDialog = null!;
    private bool isInitialized;
    private bool canHandleOrders;
    private List<(LocalDate Date, string Value, string Text)>? months;
    private LocalDate currentMonth;
    private string currentMonthValue = string.Empty;
    private LocalDate? previousMonth;
    private LocalDate? nextMonth;
    private IReadOnlyDictionary<int, Resource>? resources;
    private List<Resource>? orderedResources;
    private int currentResourceId;
    private Dictionary<LocalDate, Day>? calendar;
    private LocalDate firstCalendarDate;
    private LocalDate lastCalendarDate;
    private Price totalPrice = new Price();

    private Task MonthChanged(string value) => UpdateCalendar(ParseMonth(value), currentResourceId);

    private Task SelectMonth(LocalDate month) => UpdateCalendar(month, currentResourceId);

    private Task SelectResource(int resourceId) => UpdateCalendar(currentMonth, resourceId);

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        canHandleOrders = authenticationState.User.IsInRole(Roles.OrderHandling);

        var pattern = LocalDatePattern.Create("MMMM yyyy", CultureInfo);
        months = GetMonths()
            .Select(date => (date, MonthPattern.Format(date), Capitalize(pattern.Format(date))))
            .ToList();

        resources = await DataProvider.GetResources();
        orderedResources = resources.Values.OrderBy(r => r.Sequence).ToList();

        await UpdateCalendar(months[0].Date, orderedResources[0].Id);
        UpdateTotalPrice();

        isInitialized = true;

        string Capitalize(string text) => CultureInfo.TextInfo.ToUpper(text[0]) + text.Substring(1);
    }

    private IEnumerable<LocalDate> GetMonths()
    {
        var today = DateProvider.Today;
        var month = GetMonthStart(today);
        var endMonth = GetMonthStart(today.PlusDays(ReservationsOptions.ReservationIsNotAllowedAfterDaysFromNow));
        while (month <= endMonth)
        {
            yield return month;
            month = month.PlusMonths(1);
        }

        static LocalDate GetMonthStart(LocalDate d) => new LocalDate(d.Year, d.Month, 1);
    }

    private static LocalDate ParseMonth(string date) => MonthPattern.Parse(date).Value;

    private async Task UpdateCalendar(LocalDate month, int resourceId)
    {
        var today = DateProvider.Today;
        var firstMonday = GetPreviousMonday(month);
        var lastSunday = GetPreviousMonday(month.PlusMonths(1).PlusDays(-1)).PlusDays(6);

        var policy = ReservationPolicyProvider.GetPolicy(resources![resourceId].Type);
        var fromDate = today < firstMonday.PlusDays(-1) ? firstMonday.PlusDays(-1) : today;
        var reservedDays = (await DataProvider.GetReservedDays(fromDate, lastSunday.PlusDays(1), true))
            .GroupBy(day
                => day.Date,
                (key, reservations)
                    => (Date: key, ReservedResources: reservations.ToDictionary(reservation => reservation.ResourceId, reservation => reservation.IsMyReservation)))
            .ToDictionary(tuple => tuple.Date, tuple => tuple.ReservedResources);

        var days = new List<Day>();
        var date = firstMonday.PlusDays(-1);
        while (date <= lastSunday.PlusDays(1))
        {
            var isResourceAvailable = await policy.IsResourceAvailable(date, resourceId);
            var day = new Day
            {
                Date = date,
                IsToday = date == today,
                IsCurrentMonth = date.Month == month.Month,
                IsHighPriceDay = DataProvider.IsHighPriceDay(date),
                IsResourceAvailable = isResourceAvailable,
            };
            if (reservedDays.TryGetValue(date, out var reservedResources))
                day.ReservedResources = reservedResources;
            days.Add(day);
            date = date.PlusDays(1);
        }
        currentMonth = month;
        var currentMonthIndex = months!.FindIndex(tuple => tuple.Date == currentMonth);
        currentMonthValue = months[currentMonthIndex].Value;
        previousMonth = currentMonthIndex > 0 ? months[currentMonthIndex - 1].Date : (LocalDate?) null;
        nextMonth = currentMonthIndex < months.Count - 1 ? months[currentMonthIndex + 1].Date : (LocalDate?) null;
        currentResourceId = resourceId;
        calendar = days.ToDictionary(day => day.Date);
        firstCalendarDate = firstMonday;
        lastCalendarDate = lastSunday;

        static LocalDate GetPreviousMonday(LocalDate d)
        {
            var daysAfterMonday = ((int) d.DayOfWeek - 1)%7;
            return d.PlusDays(-daysAfterMonday);
        }
    }

    private static string GetCalendarDayClasses(Day day, int dayOfWeek)
    {
        return string.Join(' ', GetClasses());

        IEnumerable<string> GetClasses()
        {
            yield return $"calendar-day-of-week-{dayOfWeek}";
            if (day.IsToday)
                yield return "calendar-today";
            else if (!day.IsCurrentMonth)
                yield return "calendar-other-month";
            if (day.IsHighPriceDay)
                yield return "calendar-high-price";
            if (day.IsResourceAvailable)
                yield return "resource-available";
            else
                yield return "resource-unavailable";
        }
    }

    private string GetResourceClasses(Day previousDay, Day day, Day nextDay, int resourceId, int resourceNumber)
    {
        return string.Join(' ', GetClasses());

        IEnumerable<string> GetClasses()
        {

            yield return "resource";
            if (!day.ReservedResources.TryGetValue(resourceId, out var isMyReservation))
                yield break;
            if (isMyReservation)
                yield return "resource-reserved-me";
            else
                yield return "resource-reserved-other";
            yield return $"resource-{resourceNumber}";
            var hasAdjacentReservationBefore = previousDay.ReservedResources.ContainsKey(resourceId);
            if (hasAdjacentReservationBefore)
                yield return "resource-extend-left";
            var hasAdjacentReservationAfter = nextDay.ReservedResources.ContainsKey(resourceId);
            if (hasAdjacentReservationAfter)
                yield return "resource-extend-right";
            var isSelectedResource = resourceId == currentResourceId;
            if (!isSelectedResource)
                yield return "resource-not-current";
        }
    }

    private async Task MakeReservation(LocalDate date)
    {
        var resource = resources![currentResourceId];
        var policy = ReservationPolicyProvider.GetPolicy(resource.Type);
        var (minimumDays, maximumDays) = await policy.GetReservationAllowedNumberOfDays(resource.Id, date);
        reservationDialog.MinimumDays = minimumDays;
        reservationDialog.MaximumDays = maximumDays;
        DataProvider.DraftOrder.AddReservation(resource, date, 0);
        reservationDialog.Show();
    }

    private async Task KeyUp(KeyboardEventArgs e, LocalDate date)
    {
        if (e.Key == "Enter")
            await MakeReservation(date);
    }

    private Task ReservationChanged() => UpdateCalendar(currentMonth, currentResourceId);

    private async Task CancelReservation()
    {
        DataProvider.DraftOrder.ClearDraftReservation();
        await UpdateCalendar(currentMonth, currentResourceId);
    }

    private async Task ConfirmReservation()
    {
        DataProvider.DraftOrder.AddDraftReservationToOrder();
        UpdateTotalPrice();
        await UpdateCalendar(currentMonth, currentResourceId);
    }

    private async Task RemoveReservation(DraftReservation reservation)
    {
        DataProvider.DraftOrder.RemoveReservation(reservation);
        UpdateTotalPrice();
        await UpdateCalendar(currentMonth, currentResourceId);
    }

    private void UpdateTotalPrice()
    {
        totalPrice = DataProvider.DraftOrder.Reservations.Aggregate(
            new Price(),
            (sum, reservation) => sum.Accumulate(reservation.Price!));
    }

    private void Checkout() => NavigationManager.NavigateTo(Urls.Checkout1);

    private void OwnerCheckout() => NavigationManager.NavigateTo(Urls.OwnerCheckout1);
}