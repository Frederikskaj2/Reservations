@page "/til-udbetaling"
@attribute [Authorize(Roles = Roles.Payment)]
@inject ApiClient ApiClient
@inject ClientDataProvider ClientDataProvider
@inject IDateProvider DateProvider
@inject FormattingService FormattingService

<main>
    @if (!isInitialized)
    {
        <Spinner />
    }
    else
    {
<Container>
    <Alert Color="Color.Success" Visible="@showSuccessAlert" Dismisable="true">
        Udbetaling af @FormattingService.FormatMoneyLong(amount) til @accountNumber er registreret.
        <CloseButton Clicked="@DismissSuccessAlert" />
    </Alert>
    <Alert Color="Color.Danger" Visible="@showErrorAlert" Dismisable="true">
        Der er sket en fejl, og udbetalingen blev ikke registreret.
        <CloseButton Clicked="@DismissErrorAlert" />
    </Alert>
    <h1>Til udbetaling</h1>
    @if (payOuts.Count == 0)
    {
        <Paragraph>Der er intet at vise.</Paragraph>
    }
    else
    {
        <Paragraph><strong>Bemærk:</strong> En udbetaling skal først registeres her før den gennemføres for at undgå at brugeren samtidig med at denne oversigt vises laver en ændring som gør at der skal udbetales et mindre beløb. Hvis der opstår en fejl i forbindelse med registreringen her skal udbetalingen <strong>ikke</strong> gennemføres. I stedet skal denne side opdateres.</Paragraph>
        <Table>
            <TableHeader>
                <TableRow>
                    <TableHeaderCell>Mail</TableHeaderCell>
                    <TableHeaderCell>Navn</TableHeaderCell>
                    <TableHeaderCell>Telefon</TableHeaderCell>
                    <TableHeaderCell>Adresse</TableHeaderCell>
                    <TableHeaderCell>Kontonummer</TableHeaderCell>
                    <TableHeaderCell Class="text-right">Beløb</TableHeaderCell>
                    <TableHeaderCell></TableHeaderCell>
                </TableRow>
            </TableHeader>
            <TableBody>
                @foreach (var payOut in payOuts)
                {
                    <TableRow @key="@payOut.UserId">
                        <TableRowCell><a href="mailto:@payOut.Email?subject=Frederikskaj 2">@FormattingService.FormatEmail(payOut.Email)</a></TableRowCell>
                        <TableRowCell>@payOut.FullName</TableRowCell>
                        <TableRowCell>@FormattingService.FormatPhone(payOut.Phone)</TableRowCell>
                        <TableRowCell>Frederikskaj @apartments![payOut.ApartmentId]</TableRowCell>
                        <TableRowCell>@payOut.AccountNumber</TableRowCell>
                        <TableRowCell Class="text-right">@FormattingService.FormatMoneyShort(payOut.Amount)</TableRowCell>
                        <TableRowCell><Button Color="Color.Light" Size="ButtonSize.Small" Clicked="@(() => RecordPayOut(payOut))">Registrér udbetaling</Button></TableRowCell>
                    </TableRow>
                }
            </TableBody>
        </Table>
        <PayOutDialog @ref="payOutDialog" OnConfirm="@OnPaymentConfirm" />
    }
</Container>
    }
</main>

@code
{
    private PayOutDialog payOutDialog = null!;
    private IReadOnlyDictionary<int, Apartment>? apartments;
    private List<PayOut> payOuts = new List<PayOut>();
    private bool isInitialized;
    private bool showSuccessAlert;
    private bool showErrorAlert;
    private int amount;
    private string? accountNumber;

    protected override async Task OnInitializedAsync()
    {
        apartments = (await ClientDataProvider.GetApartments()).ToDictionary(apartment => apartment.Id);
        var maybe = await ApiClient.GetJsonAsync<IEnumerable<PayOut>>("pay-outs");
        if (maybe.TryGetValue(out var response))
            payOuts = response.ToList();
        isInitialized = true;
    }

    private void RecordPayOut(PayOut payOut)
    {
        DismissSuccessAlert();
        DismissErrorAlert();
        accountNumber = payOut.AccountNumber;
        payOutDialog.Show(payOut.UserId, payOut.FullName, DateProvider.Today, payOut.Amount);
    }

    private async Task OnPaymentConfirm((int UserId, LocalDate Date, int Amount) tuple)
    {
        var request = new PayOutRequest { Date = tuple.Date, Amount = tuple.Amount };
        var requestUri = $"users/{tuple.UserId}/pay-out";
        var maybe = await ApiClient.PostJsonAsync<PayOutResponse>(requestUri, request);
        if (maybe.TryGetValue(out var response) && response.PayOut != null)
        {
            amount = request.Amount;
            var index = payOuts.FindIndex(payOut => payOut.UserId == response.PayOut.UserId);
            if (index >= 0)
            {
                if (response.PayOut.Amount == 0)
                {
                    payOuts.RemoveAt(index);
                    ClientDataProvider.Refresh();
                }
                else
                {
                    payOuts[index].Amount = response.PayOut.Amount;
                }
            }
            showSuccessAlert = true;
        }
        else
            showErrorAlert = true;
    }

    private void DismissSuccessAlert() => showSuccessAlert = false;
    private void DismissErrorAlert() => showErrorAlert = false;
}