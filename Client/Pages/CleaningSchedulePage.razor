@page "/rengoeringsplan"
@attribute [Authorize(Roles = Roles.Cleaning)]
@inject ApiClient ApiClient
@inject ApplicationState ApplicationState
@inject ClientDataProvider ClientDataProvider
@inject FormattingService FormattingService

<main>
    @if (!isInitialized)
    {
        <Spinner />
    }
    else
    {
        var orderedResources = resources!.Values.OrderBy(resource => resource.Sequence);
        <Container>
            <Alert Color="Color.Success" Visible="@showSuccessAlert" Dismisable="true">
                Rengøringsplanen er blevet send til @email.
                <CloseButton Clicked="@DismissSuccessAlert" />
            </Alert>
            <Alert Color="Color.Danger" Visible="@showErrorAlert" Dismisable="true">
                Der er sket en fejl, og rengøringsplane blev ikke send til @email.
                <CloseButton Clicked="@DismissErrorAlert" />
            </Alert>
            <h1>Rengøringsplan</h1>
            @if (cleaningTasks.Any())
            {
                <Table>
                    <TableHeader>
                        <TableRow>
                            <TableHeaderCell>Dato</TableHeaderCell>
                            <TableHeaderCell>Lokale</TableHeaderCell>
                        </TableRow>
                    </TableHeader>
                    <TableBody>
                        @foreach (var cleaningTask in cleaningTasks!)
                        {
                            <TableRow>
                                <TableRowCell>@FormattingService.FormatDate(cleaningTask.Date)</TableRowCell>
                                <TableRowCell>@resources[cleaningTask.ResourceId].Name</TableRowCell>
                            </TableRow>
                        }
                    </TableBody>
                </Table>
                <Form>
                    <Paragraph>
                        <Button Color="Color.Secondary" Type="ButtonType.Submit" PreventDefaultOnSubmit="true" Clicked="@SendList">Send liste som mail</Button>
                    </Paragraph>
                </Form>
            }
            else
            {
                <Paragraph>Der er intet at vise.</Paragraph>
            }
        </Container>
    }
</main>

@code {

    private IReadOnlyDictionary<int, Resource>? resources;
    private IEnumerable<CleaningTask>? cleaningTasks;
    private string? email;
    private bool isInitialized;
    private bool showSuccessAlert;
    private bool showErrorAlert;

    protected override async Task OnInitializedAsync()
    {
        resources = await ClientDataProvider.GetResources();
        var maybe = await ApiClient.GetJsonAsync<IEnumerable<CleaningTask>>("cleaning-tasks");
        if (!maybe.TryGetValue(out cleaningTasks))
            cleaningTasks = Enumerable.Empty<CleaningTask>();
        email = await ApplicationState.GetUserEmail();
        isInitialized = true;
    }

    private async Task SendList()
    {
        DismissAllAlerts();

        var maybe = await ApiClient.PostJsonAsync<OperationResponse>("cleaning-tasks/send", null);
        if (maybe.TryGetValue(out var response) && response.Result == OperationResult.Success)
            showSuccessAlert = true;
        else
            showErrorAlert = true;
    }

    private void DismissSuccessAlert() => showSuccessAlert = false;

    private void DismissErrorAlert() => showErrorAlert = false;

    private void DismissAllAlerts()
    {
        DismissSuccessAlert();
        DismissErrorAlert();
    }
}
