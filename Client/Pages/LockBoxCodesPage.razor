@page "/noeglebokskoder"
@attribute [Authorize(Roles = Roles.LockBoxCodes)]
@inject ApiClient ApiClient
@inject ApplicationState ApplicationState
@inject ClientDataProvider ClientDataProvider
@inject FormattingService FormattingService

<main>
    @if (!isInitialized)
    {
        <Spinner />
    }
    else
    {
        var orderedResources = resources!.Values.OrderBy(resource => resource.Sequence);
        <Container>
            <Alert Color="Color.Success" Visible="@showSuccessAlert" Dismisable="true">
                Listen med nøglebokskoder er blevet send til @email.
                <CloseButton Clicked="@DismissSuccessAlert" />
            </Alert>
            <Alert Color="Color.Danger" Visible="@showErrorAlert" Dismisable="true">
                Der er sket en fejl, og listen med nøglebokskoder blev ikke send til @email.
                <CloseButton Clicked="@DismissErrorAlert" />
            </Alert>
            <h1>Koder til nøglebokse</h1>
            <Table>
                <TableHeader>
                    <TableRow>
                        <TableHeaderCell>Uge</TableHeaderCell>
                        <TableHeaderCell>Dato</TableHeaderCell>
                        @foreach (var resource in orderedResources)
                        {
                            <TableHeaderCell Class="text-center" ColumnSpan="2">@resource.Name</TableHeaderCell>
                        }
                    </TableRow>
                </TableHeader>
                <TableBody>
                    @foreach (var weeklyLoockBoxCodes in allWeeklyLockBoxCodes!)
                    {
                        <TableRow>
                            <TableHeaderCell>@weeklyLoockBoxCodes.WeekNumber</TableHeaderCell>
                            <TableRowCell>@FormattingService.FormatDate(weeklyLoockBoxCodes.Date)</TableRowCell>
                            @foreach (var resource in orderedResources)
                            {
                                var code = weeklyLoockBoxCodes.Codes!.FirstOrDefault(c => c.ResourceId == resource.Id);
                                if (code != null)
                                {
                                    <TableRowCell Class="text-right">@(code.Code)</TableRowCell>
                                    <TableRowCell Class="text-left">@(code.Difference)</TableRowCell>
                                }
                                else
                                {
                                    <TableRowCell ColumnSpan="2" />
                                }
                            }
                        </TableRow>
                    }
                </TableBody>
            </Table>
            <Form>
                <Paragraph>
                    <Button Color="Color.Secondary" Type="ButtonType.Submit" PreventDefaultOnSubmit="true" Clicked="@SendList">Send liste som mail</Button>
                </Paragraph>
            </Form>
        </Container>
    }
</main>

@code
{
    private IReadOnlyDictionary<int, Resource>? resources;
    private IEnumerable<WeeklyLockBoxCodes>? allWeeklyLockBoxCodes;
    private string? email;
    private bool isInitialized;
    private bool showSuccessAlert;
    private bool showErrorAlert;

    protected override async Task OnInitializedAsync()
    {
        resources = await ClientDataProvider.GetResources();
        allWeeklyLockBoxCodes = await ClientDataProvider.GetWeeklyLockBoxCodes();
        email = await ApplicationState.GetUserEmail();
        isInitialized = true;
    }

    private async Task SendList()
    {
        DismissAllAlerts();

        var problem = await ApiClient.Post("lock-box-codes/send");
        if (problem == null)
            showSuccessAlert = true;
        else
            showErrorAlert = true;
    }

    private void DismissSuccessAlert() => showSuccessAlert = false;

    private void DismissErrorAlert() => showErrorAlert = false;

    private void DismissAllAlerts()
    {
        DismissSuccessAlert();
        DismissErrorAlert();
    }
}
