@page "/calendar"
@inject ApiClient ApiClient;
@inject ApplicationState ApplicationState
@inject CultureInfo CultureInfo
@inject IDateProvider DateProvider
@inject ReservationsOptions ReservationsOptions;

<div class="container-fluid container-with-sidebar">
    @if (!isInitialized)
    {
        <p>Vent...</p>
    }
    else
    {
        <div class="calendar">
            <form>
                <div class="row">
                    <div class="col">
                        <select class="form-control" @onchange="UpdateCalendar">
                            @{
                                var isFirst = true;
                                foreach (var (date, text) in months!)
                                {
                                    <option value="@date" selected="@isFirst">@text</option>
                                    isFirst = false;
                                }
                            }
                        </select>
                    </div>
                    <div class="col">
                        <select class="form-control" @bind="currentResourceId">
                            @foreach (var resource in orderedResources!)
                            {
                                <option value="@resource.Id">@resource.Name</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <div class="legend-container">
                            @{
                                var resourceCounter = 1;
                                foreach (var resource in orderedResources!)
                                {
                                    <span class="legend-icon resource-@(resourceCounter++)"></span>
                                    <span class="legend-text@(resource.Id == currentResourceId ? " legend-selected-resource" : string.Empty)">@resource.Name</span>
                                }
                            }
                        </div>
                    </div>
                </div>
            </form>
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th scope="col">Mandag</th>
                        <th scope="col">Tirsdag</th>
                        <th scope="col">Onsdag</th>
                        <th scope="col">Torsdag</th>
                        <th scope="col">Fredag</th>
                        <th scope="col">Lørdag</th>
                        <th scope="col">Søndag</th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        var nextMonth = currentMonth.PlusMonths(1);
                        var day = GetPreviousMonday(currentMonth);
                        while (day < nextMonth)
                        {
                            <tr>
                                @{
                                    for (var i = 0; i < 7; i += 1)
                                    {
                                        var localDay = day;
                                        var makeReservation = GetIsResourceAvailable(day, currentResourceId) ? () => MakeReservation(localDay) : DoNothing;
                                        resourceCounter = 1;
                                        <td class="@string.Join(' ', GetCalendarDayClasses(day))" @onclick="@makeReservation">
                                            <div class="day">@day.Day</div>
                                            @foreach (var classes in orderedResources!.Select(resource => GetResourceClasses(day, resource.Id, resourceCounter++)))
                                            {
                                                <div class="@string.Join(' ', classes)"></div>
                                            }
                                        </td>
                                        day = day.PlusDays(1);
                                    }
                                }
                            </tr>
                        }
                    }
                </tbody>
            </table>
            <p>

            </p>
        </div>
        <div class="sidebar">
            @if (ApplicationState.Reservation.Reservations!.Count > 0)
            {
                <div class="reservations">
                    <h1>Din reservation</h1>
                    @foreach (var reservation in ApplicationState.Reservation.Reservations)
                    {
                        <div class="card">
                            <div class="card-body">
                                <h2 class="card-title">@reservation.Resource!.Name</h2>
                                <p class="card-text">@reservation.Date.ToString(CultureInfo.DateTimeFormat.LongDatePattern, CultureInfo) / @reservation.DurationInDays dag@(reservation.DurationInDays > 1 ? "e" : string.Empty)</p>
                            </div>
                        </div>
                    }
                </div>
                <div class="reservations-total">
                    <button type="button" class="btn btn-success">Reservér</button>
                </div>
            }
            else
            {
                <div class="reservations">
                    <p class="reservations-get-started">Vælg lokale og en ledig dato for at reservere</p>
                </div>
            }
        </div>
        <ReservationDialog @ref="@reservationDialog" Reservation="@currentReservation" MinimumDays="1" MaximumDays="14" OnCancel="@CancelReservation" OnConfirm="@ConfirmReservation" />
    }
</div>

@code {

    private static readonly Action DoNothing = () => { };
    private static readonly LocalDatePattern MonthPattern = LocalDatePattern.CreateWithInvariantCulture("yyyy-MM");
    private bool isInitialized;
    private LocalDate today;
    private LocalDate reservationsAreNotAllowedBefore;
    private LocalDate reservationsAreNotAllowedAfter;
    private LocalDate currentMonth;
    private List<(string Date, string Text)>? months;
    private Dictionary<int, Resource>? resources;
    private List<Resource>? orderedResources;
    private int currentResourceId;
    private Dictionary<(LocalDate, int), bool>? reservations;
    private ResourceReservation? currentReservation;
    private ReservationDialog reservationDialog = null!;

    private void UpdateCalendar(ChangeEventArgs e)
    {
        ParseCurrentMonth(e.Value.ToString());
    }

    protected override async Task OnInitializedAsync()
    {
        today = DateProvider.Today;
        reservationsAreNotAllowedBefore = today.PlusDays(ReservationsOptions.ReservationIsNotAllowedBeforeDaysFromNow);
        reservationsAreNotAllowedAfter = today.PlusDays(ReservationsOptions.ReservationIsNotAllowedAfterDaysFromNow);

        string Capitalize(string text) => CultureInfo.TextInfo.ToUpper(text[0]) + text.Substring(1);

        var pattern = LocalDatePattern.Create("MMMM yyyy", CultureInfo);
        months = GetMonths()
            .Select(date => (MonthPattern.Format(date), Capitalize(pattern.Format(date))))
            .ToList();
        ParseCurrentMonth(months[0].Date);

        resources = (await ApiClient.GetJsonAsync<IEnumerable<Resource>>("resources")).ToDictionary(r => r.Id);
        orderedResources = resources.Values.OrderBy(r => r.Sequence).ToList();
        currentResourceId = orderedResources[0].Id;

        reservations = await GetReservations();

        isInitialized = true;
    }

    private async Task<Dictionary<(LocalDate Date, int ResourceId), bool>> GetReservations()
    {
        var firstMonday = GetPreviousMonday(GetMonthStart(today));
        var fromDate = firstMonday.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);
        var requestUri = $"resource-reservations?fromDate={fromDate}";
        var resourceReservations = await ApiClient.GetJsonAsync<IEnumerable<ResourceReservation>>(requestUri);
        return resourceReservations.ToDictionary(rr => (rr.Date, rr.ResourceId), _ => false);
    }

    private void ParseCurrentMonth(string date)
    {
        var result = MonthPattern.Parse(date);
        if (result.Success)
            currentMonth = result.Value;
    }

    private IEnumerable<LocalDate> GetMonths()
    {
        var month = GetMonthStart(today);
        var endMonth = GetMonthStart(today.PlusDays(ReservationsOptions.ReservationIsNotAllowedAfterDaysFromNow));
        while (month <= endMonth)
        {
            yield return month;
            month = month.PlusMonths(1);
        }
    }

    private bool GetIsResourceAvailable(LocalDate date, int resourceId)
    {
        var isReservationAllowed = reservationsAreNotAllowedBefore <= date && date <= reservationsAreNotAllowedAfter;
        var isSelectedResourceInUse = reservations!.ContainsKey((date, currentResourceId));
        return isReservationAllowed && !isSelectedResourceInUse;
    }

    private IEnumerable<string> GetCalendarDayClasses(LocalDate day)
    {
        var isCurrentMonth = day.Month == currentMonth.Month;
        if (!isCurrentMonth)
            yield return "calendar-other-month";
        var isToday = day == today;
        if (isToday)
            yield return "calendar-today";
        var isReservationAllowed = reservationsAreNotAllowedBefore <= day && day <= reservationsAreNotAllowedAfter;
        var isSelectedResourceInUse = reservations!.ContainsKey((day, currentResourceId));
        if (isReservationAllowed && !isSelectedResourceInUse)
            yield return "resource-available";
        else
            yield return "resource-unavailable";
    }

    private IEnumerable<string> GetResourceClasses(LocalDate day, int resourceId, int resourceNumber)
    {
        yield return "resource";
        var isResourceInUse = reservations!.ContainsKey((day, resourceId));
        if (!isResourceInUse)
            yield break;
        yield return $"resource-{resourceNumber}";
        var hasAdjacentReservationBefore = reservations!.ContainsKey(((day.PlusDays(-1), resourceId)));
        if (hasAdjacentReservationBefore)
            yield return "resource-extend-left";
        var hasAdjacentReservationAfter = reservations!.ContainsKey(((day.PlusDays(1), resourceId)));
        if (hasAdjacentReservationAfter)
            yield return "resource-extend-right";
        var isSelectedResource = resourceId == currentResourceId;
        if (!isSelectedResource)
            yield return "resource-not-current";
    }

    private void MakeReservation(LocalDate day)
    {
        currentReservation = new ResourceReservation
        {
            Resource = resources![currentResourceId],
            Date = day,
            DurationInDays = 1
        };
        reservationDialog.Show();
    }

    private void CancelReservation()
    {
        reservationDialog.Hide();
    }

    private void ConfirmReservation()
    {
        ApplicationState.Reservation.Reservations!.Add(currentReservation!);
        reservationDialog.Hide();
        currentReservation = null;
    }

    private static LocalDate GetMonthStart(LocalDate date) => new LocalDate(date.Year, date.Month, 1);

    private static LocalDate GetPreviousMonday(LocalDate date)
    {
        var daysAfterMonday = ((int) date.DayOfWeek - 1)%7;
        return date.PlusDays(-daysAfterMonday);
    }

}