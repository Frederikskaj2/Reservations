@page "/calendar"
@inject ApplicationState ApplicationState
@inject CultureInfo CultureInfo
@inject HttpClient HttpClient;
@inject ReservationsOptions ReservationsOptions;

<div class="container-fluid container-with-sidebar">
    @if (!isInitialized)
    {
        <p>Vent...</p>
    }
    else
    {
        <div class="calendar">
            <form>
                <div class="row">
                    <div class="col">
                        <select class="form-control" @onchange="UpdateCalendar">
                            @{
                                var isFirst = true;
                                foreach (var (date, text) in months!)
                                {
                                    <option value="@date" selected="@isFirst">@text</option>
                                    isFirst = false;
                                }
                            }
                        </select>
                    </div>
                    <div class="col">
                        <select class="form-control" @bind="currentResourceId">
                            @foreach (var resource in orderedResources!)
                            {
                                <option value="@resource.Id">@resource.Name</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <div class="legend-container">
                            @{
                                var resourceCounter = 1;
                                foreach (var resource in orderedResources!)
                                {
                                    <span class="legend-icon resource-@(resourceCounter++)"></span>
                                    <span class="legend-text@(resource.Id == currentResourceId ? " legend-selected-resource" : string.Empty)">@resource.Name</span>
                                }
                            }
                        </div>
                    </div>
                </div>
            </form>
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th scope="col">Mandag</th>
                        <th scope="col">Tirsdag</th>
                        <th scope="col">Onsdag</th>
                        <th scope="col">Torsdag</th>
                        <th scope="col">Fredag</th>
                        <th scope="col">Lørdag</th>
                        <th scope="col">Søndag</th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        var nextMonth = currentMonth.AddMonths(1);
                        var day = GetPreviousMonday(currentMonth);
                        while (day < nextMonth)
                        {
                            <tr>
                                @{
                                    for (var i = 0; i < 7; i += 1)
                                    {
                                        var localDay = day;
                                        var makeReservation = GetIsResourceAvailable(day, currentResourceId) ? () => MakeReservation(localDay) : DoNothing;
                                        resourceCounter = 1;
                                        <td class="@string.Join(' ', GetCalendarDayClasses(day))" @onclick="@makeReservation">
                                            <div class="day">@day.Day</div>
                                            @foreach (var classes in orderedResources!.Select(resource => GetResourceClasses(day, resource.Id, resourceCounter++)))
                                            {
                                                <div class="@string.Join(' ', classes)"></div>
                                            }
                                        </td>
                                        day = day.AddDays(1);
                                    }
                                }
                            </tr>
                        }
                    }
                </tbody>
            </table>
            <p>

            </p>
        </div>
        <div class="sidebar"></div>
        <ReservationDialog @ref="@reservationDialog" Reservation="@ApplicationState.Reservation.Reservations.LastOrDefault()" MinimumDays="1" MaximumDays="14" OnCancel="@CancelReservation" OnConfirm="@ConfirmReservation" />
    }
</div>

@code {

    private static readonly Action DoNothing = () => { };
    private bool isInitialized;
    private DateTime today;
    private DateTime reservationsAreNotAllowedBefore;
    private DateTime reservationsAreNotAllowedAfter;
    private DateTime currentMonth;
    private List<(string Date, string Text)>? months;
    private Dictionary<int, Resource>? resources;
    private List<Resource>? orderedResources;
    private int currentResourceId;
    private Dictionary<(DateTime, int), bool>? reservations;
    private ReservationDialog reservationDialog = null!;

    private void UpdateCalendar(ChangeEventArgs e)
    {
        ParseCurrentMonth(e.Value.ToString());
    }

    protected override async Task OnInitializedAsync()
    {
        today = DateTime.UtcNow.Date;
        reservationsAreNotAllowedBefore = today.AddDays(ReservationsOptions.ReservationIsNotAllowedBeforeDaysFromNow);
        reservationsAreNotAllowedAfter = today.AddDays(ReservationsOptions.ReservationIsNotAllowedAfterDaysFromNow);

        months = GetMonths()
            .Select(date => (
                date.ToString("yyyy-MM", CultureInfo.InvariantCulture),
                    CultureInfo.TextInfo.ToTitleCase(date.ToString("MMMM yyyy", CultureInfo))))
            .ToList();
        ParseCurrentMonth(months[0].Date);

        resources = (await HttpClient.GetJsonAsync<IEnumerable<Resource>>("resources")).ToDictionary(r => r.Id);
        orderedResources = resources.Values.OrderBy(r => r.Sequence).ToList();
        currentResourceId = orderedResources[0].Id;

        reservations = await GetReservations();

        isInitialized = true;
    }

    private async Task<Dictionary<(DateTime Date, int ResourceId), bool>> GetReservations()
    {
        var firstMonday = GetPreviousMonday(GetMonthStart(today));
        var requestUri = $"resource-reservations?fromDate={firstMonday:O}";
        var resourceReservations = await HttpClient.GetJsonAsync<IEnumerable<ResourceReservation>>(requestUri);
        return resourceReservations.ToDictionary(rr => (rr.Date, rr.ResourceId), _ => false);
    }

    private void ParseCurrentMonth(string date)
    {
        DateTime.TryParseExact(date, "yyyy-MM", CultureInfo.InvariantCulture, DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal, out currentMonth);
    }

    private IEnumerable<DateTime> GetMonths()
    {
        var month = GetMonthStart(today);
        var endMonth = today.AddDays(ReservationsOptions.ReservationIsNotAllowedAfterDaysFromNow);
        while (month <= endMonth)
        {
            yield return month;
            month = month.AddMonths(1);
        }
    }

    private bool GetIsResourceAvailable(DateTime day, int resourceId)
    {
        var isReservationAllowed = reservationsAreNotAllowedBefore <= day && day <= reservationsAreNotAllowedAfter;
        var isSelectedResourceInUse = reservations!.ContainsKey((day, currentResourceId));
        return isReservationAllowed && !isSelectedResourceInUse;
    }

    private IEnumerable<string> GetCalendarDayClasses(DateTime day)
    {
        var isCurrentMonth = day.Month == currentMonth.Month;
        if (!isCurrentMonth)
            yield return "calendar-other-month";
        var isToday = day == today;
        if (isToday)
            yield return "calendar-today";
        var isReservationAllowed = reservationsAreNotAllowedBefore <= day && day <= reservationsAreNotAllowedAfter;
        var isSelectedResourceInUse = reservations!.ContainsKey((day, currentResourceId));
        if (isReservationAllowed && !isSelectedResourceInUse)
            yield return "resource-available";
        else
            yield return "resource-unavailable";
    }

    private IEnumerable<string> GetResourceClasses(DateTime day, int resourceId, int resourceNumber)
    {
        yield return "resource";
        var isResourceInUse = reservations!.ContainsKey((day, resourceId));
        if (!isResourceInUse)
            yield break;
        yield return $"resource-{resourceNumber}";
        var hasAdjacentReservationBefore = reservations!.ContainsKey(((day.AddDays(-1), resourceId)));
        if (hasAdjacentReservationBefore)
            yield return "resource-extend-left";
        var hasAdjacentReservationAfter = reservations!.ContainsKey(((day.AddDays(1), resourceId)));
        if (hasAdjacentReservationAfter)
            yield return "resource-extend-right";
        var isSelectedResource = resourceId == currentResourceId;
        if (!isSelectedResource)
            yield return "resource-not-current";
    }

    private void MakeReservation(DateTime day)
    {
        var reservation = new ResourceReservation
        {
            Resource = resources![currentResourceId],
            Date = day,
            DurationInDays = 1
        };
        ApplicationState.Reservation!.Reservations!.Add(reservation);
        reservationDialog.Show();
    }

    private void CancelReservation()
    {
        reservationDialog.Hide();
    }

    private void ConfirmReservation()
    {
        reservationDialog.Hide();
    }

    private static DateTime GetMonthStart(DateTime day) => new DateTime(day.Year, day.Month, 1, 0, 0, 0, DateTimeKind.Utc);

    private static DateTime GetPreviousMonday(DateTime day) => day.AddDays(-((((int) day.DayOfWeek) + 6)%7));

}