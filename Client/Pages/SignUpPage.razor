@page "/opret-bruger"
@inject ApiClient ApiClient
@inject ApplicationState ApplicationState
@inject IAuthenticationStateProvider AuthenticationStateProvider
@inject ClientDataProvider ClientDataProvider
@inject NavigationManager NavigationManager

<main>
    @if (!isInitialized)
    {
        <Spinner />
    }
    else
    {
        <Container class="container-max-sm">
            <Alert Color="Color.Danger" Visible="@showErrorAlert" Dismisable="true">
                Der er sket en fejl, og din bruger blev ikke oprettet.
                @if (errors.HasFlag(SignUpErrorCodes.DuplicateEmail))
                {
                    <text>Der findes allerede en bruger med mail @ApplicationState.SignUpRequest.Email. <a href="@Urls.ResetPassword">Vi kan sende dig en mail, så du kan få en ny adgangskode.</a></text>
                }
                else
                {
                    <PasswordErrors PasswordTooShort="errors.HasFlag(SignUpErrorCodes.PasswordTooShort)"
                                    PasswordRequiresLower="errors.HasFlag(SignUpErrorCodes.PasswordRequiresLower)"
                                    PasswordRequiresUpper="errors.HasFlag(SignUpErrorCodes.PasswordRequiresUpper)"
                                    PasswordRequiresDigit="errors.HasFlag(SignUpErrorCodes.PasswordRequiresDigit)"
                                    PasswordRequiresNonAlphanumeric="errors.HasFlag(SignUpErrorCodes.PasswordRequiresNonAlphanumeric)"
                                    PasswordRequiresUniqueChars="errors.HasFlag(SignUpErrorCodes.PasswordRequiresUniqueChars)" />
                }
                <CloseButton Clicked="@DismissErrorAlert" />
            </Alert>
            <Form>
                <Validations @ref="validations" Mode="ValidationMode.Manual" Model="@ApplicationState.SignUpRequest">
                    <Field>
                        <FieldLabel>Mail</FieldLabel>
                        <FieldBody>
                            <Validation>
                                <TextEdit Role="TextRole.Email" @bind-Text="@ApplicationState.SignUpRequest.Email">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                            </Validation>
                        </FieldBody>
                    </Field>
                    <Field>
                        <FieldLabel>Fulde navn</FieldLabel>
                        <FieldBody>
                            <Validation>
                                <TextEdit @bind-Text="@ApplicationState.SignUpRequest.FullName">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                            </Validation>
                        </FieldBody>
                    </Field>
                    <Field>
                        <FieldLabel>Telefonnummer</FieldLabel>
                        <FieldBody>
                            <Validation>
                                <TextEdit InputMode="TextInputMode.Tel" @bind-Text="@ApplicationState.SignUpRequest.Phone">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                            </Validation>
                        </FieldBody>
                    </Field>
                    <Field>
                        <FieldLabel>Din adresse</FieldLabel>
                        <Select TValue="int" SelectedValue="@(ApplicationState.SignUpRequest.ApartmentId ?? 0)" SelectedValueChanged="@ApartmentChanged">
                            <SelectItem Value="0">Vælg din bopæl</SelectItem>
                            @foreach (var apartment in apartments)
                            {
                                <SelectItem Value="@apartment.Id">@apartment</SelectItem>
                            }
                        </Select>
                    </Field>
                    <Field>
                        <FieldLabel>Adgangskode</FieldLabel>
                        <FieldBody>
                            <Validation>
                                <TextEdit Role="TextRole.Password" @bind-Text="@ApplicationState.SignUpRequest.Password">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                            </Validation>
                        </FieldBody>
                    </Field>
                    <Field>
                        <FieldLabel>Gentag adgangskode</FieldLabel>
                        <FieldBody>
                            <Validation>
                                <TextEdit Role="TextRole.Password" @bind-Text="@ApplicationState.SignUpRequest.ConfirmPassword">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                            </Validation>
                        </FieldBody>
                    </Field>
                    <Field>
                        <Validation>
                            <CheckEdit @bind-Checked="@ApplicationState.SignUpRequest.DidConsent">
                                <ChildContent>
                                    Jeg <a href="@Urls.Consent">samtykker</a> til at ovenstående oplysninger behandles af Grundejerforeningen Frederikskaj 2 med henblik på reservation af lokaler.
                                </ChildContent>
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </CheckEdit>
                        </Validation>
                    </Field>
                    <Field>
                        <CheckEdit @bind-Checked="@ApplicationState.SignUpRequest.IsPersistent">Husk mig</CheckEdit>
                    </Field>
                    <Button Color="Color.Primary" Type="ButtonType.Submit" PreventDefaultOnSubmit="true" Clicked="@Submit" class="btn-text">Opret bruger</Button>
                </Validations>
            </Form>
        </Container>
    }
</main>

@code {

    private Validations validations = null!;
    private IEnumerable<Apartment> apartments = null!;
    private bool isInitialized;
    private bool showErrorAlert;
    private SignUpErrorCodes errors;

    protected override async Task OnInitializedAsync()
    {
        ApplicationState.ResetSignUpState();

        apartments = await ClientDataProvider.GetApartments();
        isInitialized = true;
    }

    private void ApartmentChanged(int apartmentId) => ApplicationState.SignUpRequest.ApartmentId = apartmentId > 0 ? (int?) apartmentId : null;

    private async Task Submit()
    {
        if (!validations.ValidateAll())
            return;

        validations.ClearAll();
        DismissErrorAlert();

        if (ApplicationState.SignUpRequest.ApartmentId == 0)
            ApplicationState.SignUpRequest.ApartmentId = null;

        var maybe = await ApiClient.PostJsonAsync<SignUpResponse>("user/sign-up", ApplicationState.SignUpRequest);
        if (maybe.TryGetValue(out var response))
        {
            if (response.User != null)
            {
                AuthenticationStateProvider.UpdateUser(response.User!);
                ApplicationState.ResetStateAfterSignIn();
                if (ApplicationState.RedirectUrl != null)
                {
                    var redirectUrl = ApplicationState.RedirectUrl;
                    ApplicationState.RedirectUrl = null;
                    NavigationManager.NavigateTo(redirectUrl);
                }
                else
                {
                    NavigationManager.NavigateTo("");
                }
            }
            errors = response.Errors!.Value;
        }
        showErrorAlert = true;
    }

    private void DismissErrorAlert() => showErrorAlert = false;

}