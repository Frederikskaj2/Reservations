@page "/sign-up"
@inject ApplicationState ApplicationState
@inject HttpClient HttpClient
@inject IAuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<div class="main">
    @if (signUpResult == SignUpResult.DuplicateEmail)
    {
        <div class="alert alert-danger fade show" role="alert">
            Der findes allerede en bruger med mail @request.Email. <a href="/user/send-password-reset-email">Vi kan sende dig en mail, så du kan få en ny adgangskode.</a>
            <button type="button" class="close" aria-label="Luk" @onclick="ClearErrorMessage">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
    }
    else if (signUpResult == SignUpResult.GeneralError)
    {
        <div class="alert alert-danger fade show" role="alert">
            Din bruger blev ikke oprettet. Der skete en fejl.
            <button type="button" class="close" aria-label="Luk" @onclick="ClearErrorMessage">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
    }
    <EditForm Model="request" OnValidSubmit="Submit">
        <div class="form-group">
            <label>Mail:</label>
            <InputText class="form-control" type="email" @bind-Value="request.Email" />
            <small class="form-text text-muted"><ValidationMessage For="@(() => request.Email)" /></small>
        </div>
        <div class="form-group">
            <label>Fulde navn:</label>
            <InputText class="form-control" @bind-Value="request.FullName" />
            <small class="form-text text-muted"><ValidationMessage For="@(() => request.FullName)" /></small>
        </div>
        <div class="form-group">
            <label>Adgangskode:</label>
            <InputText class="form-control" type="password" @bind-Value="request.Password" />
            <small class="form-text text-muted"><ValidationMessage For="@(() => request.Password)" /></small>
        </div>
        <div class="form-group">
            <label>Gentag adgangskode:</label>
            <InputText class="form-control" type="password" @bind-Value="request.ConfirmPassword" />
            <small class="form-text text-muted"><ValidationMessage For="@(() => request.ConfirmPassword)" /></small>
        </div>
        <div class="form-group">
            <InputCheckbox @bind-Value="request.IsPersistent" />
            <label class="form-check-label">Husk mig</label>
        </div>
        <button type="submit" class="btn btn-primary">
            Opret bruger
        </button>
        <DataAnnotationsValidator />
    </EditForm>
</div>

@code {

    private readonly SignUpRequest request = new SignUpRequest();
    private SignUpResult signUpResult;

    private async Task Submit()
    {
        ClearErrorMessage();
        var response = await HttpClient.PostJsonAsync<SignUpResponse>("user/sign-up", request);
        if (response.Result == SignUpResult.Success)
        {
            AuthenticationStateProvider.UpdateUser(response.User!);
            if (ApplicationState.RedirectUrl != null)
            {
                var redirectUrl = ApplicationState.RedirectUrl;
                ApplicationState.RedirectUrl = null;
                NavigationManager.NavigateTo(redirectUrl);
            }
        }
        else
            SetErrorMessage(response.Result);
    }

    private void ClearErrorMessage()
    {
        signUpResult = default;
    }

    private void SetErrorMessage(SignUpResult result)
    {
        signUpResult = result;
    }
}
