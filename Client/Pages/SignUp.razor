@page "/sign-up"
@inject ApiClient ApiClient
@inject ApplicationState ApplicationState
@inject IAuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<main>
    <div class="form-container">
        <Alert Color="Color.Danger" IsShow="@showDuplicateEmailAlert">
            <CloseButton Clicked="@DismissDuplicateEmailAlert"/>
            Der findes allerede en bruger med mail @request.Email. <a href="/user/send-password-reset-email">Vi kan sende dig en mail, så du kan få en ny adgangskode.</a>
        </Alert>
        <Alert Color="Color.Danger" IsShow="@showErrorAlert">
            <CloseButton Clicked="@DismissErrorAlert" />
            Der er sket en fejl. Din bruger blev ikke oprettet.
        </Alert>
        <Validations @ref="validations" Mode="ValidationMode.Manual" Model="@request">
            <Field>
                <FieldLabel>Mail</FieldLabel>
                <FieldBody>
                    <Validation>
                        <TextEdit Role="TextRole.Email" @bind-Text="@request.Email">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </Validation>
                </FieldBody>
            </Field>
            <Field>
                <FieldLabel>Fulde navn</FieldLabel>
                <FieldBody>
                    <Validation>
                        <TextEdit @bind-Text="@request.FullName">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </Validation>
                </FieldBody>
            </Field>
            <Field>
                <FieldLabel>Adgangskode</FieldLabel>
                <FieldBody>
                    <Validation>
                        <TextEdit Role="TextRole.Password" @bind-Text="@request.Password">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </Validation>
                </FieldBody>
            </Field>
            <Field>
                <FieldLabel>Gentag dgangskode</FieldLabel>
                <FieldBody>
                    <Validation>
                        <TextEdit Role="TextRole.Password" @bind-Text="@request.ConfirmPassword">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </Validation>
                </FieldBody>
            </Field>
            <Field>
                <CheckEdit @bind-Checked="@request.IsPersistent">Husk mig</CheckEdit>
            </Field>
            <Button Color="Color.Primary" Clicked="@Submit">Opret bruger</Button>
        </Validations>
    </div>
</main>

@code {

    private readonly SignUpRequest request = new SignUpRequest();
    private bool showDuplicateEmailAlert;
    private bool showErrorAlert;
    Validations validations = null!;

    private async Task Submit()
    {
        if (!validations.ValidateAll())
            return;

        validations.ClearAll();
        DismissDuplicateEmailAlert();
        DismissErrorAlert();

        var maybe = await ApiClient.PostJsonAsync<SignUpResponse>("user/sign-up", request);
        if (maybe.TryGetValue(out var response))
        {
            if (response.Result == SignUpResult.Success)
            {
                AuthenticationStateProvider.UpdateUser(response.User!);
                if (ApplicationState.RedirectUrl != null)
                {
                    var redirectUrl = ApplicationState.RedirectUrl;
                    ApplicationState.RedirectUrl = null;
                    NavigationManager.NavigateTo(redirectUrl);
                }
                else
                {
                    NavigationManager.NavigateTo("");
                }
            }
            else if (response.Result == SignUpResult.DuplicateEmail)
            {
                showDuplicateEmailAlert = true;
                return;
            }
        }
        showErrorAlert = true;
    }

    private void DismissDuplicateEmailAlert() => showDuplicateEmailAlert = false;

    private void DismissErrorAlert() => showErrorAlert = false;

}