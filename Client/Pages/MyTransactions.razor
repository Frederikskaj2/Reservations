@page  "/bruger/kontoudtog"
@attribute [Authorize]
@inject ApiClient ApiClient
@inject ClientDataProvider ClientDataProvider
@inject FormattingService FormattingService

<main>
    @if (!isInitialized)
    {
        <Spinner />
    }
    else
    {
        <Container>
            <Alert Color="Color.Danger" Visible="@showErrorAlert" Dismisable="true">
                Der er sket en fejl.
                <CloseButton Clicked="@DismissErrorAlert" />
            </Alert>
            <h1>Kontoudtog</h1>
            @if (!transactions!.Any())
            {
                <Paragraph>Der er intet at vise.</Paragraph>
            }
            else
            {
                <Table>
                    <TableHeader>
                        <TableRow>
                            <TableHeaderCell>Dato</TableHeaderCell>
                            <TableHeaderCell>Bestillingsnr.</TableHeaderCell>
                            <TableHeaderCell>Tekst</TableHeaderCell>
                            <TableHeaderCell class="text-right">Beløb</TableHeaderCell>
                            <TableHeaderCell class="text-right">Saldo</TableHeaderCell>
                        </TableRow>
                    </TableHeader>
                    <TableBody>
                        @{
                            var balance = 0;
                            foreach (var transaction in transactions!)
                            {
                                balance += transaction.Amount;
                                var localBalance = balance;
                                <TableRow>
                                    <TableRowCell>@FormattingService.FormatDate(transaction.Date)</TableRowCell>
                                    <TableRowCell><a href="@Urls.MyOrders/@transaction.OrderId">@transaction.OrderId</a></TableRowCell>
                                    <TableRowCell>@GetTransactionText(transaction)</TableRowCell>
                                    <TableRowCell class="text-right">@FormattingService.FormatMoneyShort(transaction.Amount)</TableRowCell>
                                    <TableRowCell class="text-right">@FormattingService.FormatMoneyShort(localBalance)</TableRowCell>
                                </TableRow>
                            }
                        }
                    </TableBody>
                </Table>
                <Paragraph>Alle beløb er i kr. En positiv saldo betyder at du har penge til gode som vil blive udbetalt. En negativ saldo betyder at du mangler at indbetale.</Paragraph>
            }
        </Container>
    }
</main>

@code {

    private bool isInitialized;
    private IReadOnlyDictionary<int, Resource>? resources;
    private IEnumerable<MyTransaction>? transactions;
    private bool showErrorAlert;

    protected override async Task OnInitializedAsync()
    {
        resources = await ClientDataProvider.GetResources();
        var maybe = await ApiClient.GetJsonAsync<IEnumerable<MyTransaction>>("user/transactions");
        if (!maybe.TryGetValue(out transactions))
            showErrorAlert = true;
        isInitialized = true;
    }

    private void DismissErrorAlert() => showErrorAlert = false;

    private string GetTransactionText(MyTransaction transaction) => transaction.Type switch
    {
        TransactionType.Order => $"Bestilling - leje",
        TransactionType.Deposit => $"Bestilling - depositum",
        TransactionType.OrderCancellation => $"Afbestilling {GetReservationText(transaction)} - leje",
        TransactionType.DepositCancellation => $"Afbestilling {GetReservationText(transaction)} - depositum",
        TransactionType.CancellationFee => $"Afbestilling {GetReservationText(transaction)} - gebyr",
        TransactionType.SettlementDeposit => $"Opgørelse {GetReservationText(transaction)} - depositum",
        TransactionType.SettlementDamages => $"Opgørelse {GetReservationText(transaction)} - skader: {transaction.Comment}",
        TransactionType.PayIn => "Indbetaling",
        TransactionType.PayOut => "Udbetaling",
        _ => throw new ArgumentOutOfRangeException()
    };

    private string GetReservationText(MyTransaction transaction)
        => $"{resources![transaction.ResourceId!.Value].Name} {FormattingService.FormatDate(transaction.ReservationDate!.Value)}";
}
