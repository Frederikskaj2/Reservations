@page "/log-ind"
@inject ApiClient ApiClient
@inject ApplicationState ApplicationState
@inject IAuthenticationStateProvider AuthenticationStateProvider
@inject ClientDataProvider ClientDataProvider
@inject NavigationManager NavigationManager

<main>
    <Container class="container-max-sm">
        <Alert Color="Color.Danger" Visible="@showErrorAlert" Dismisable="true">
            Der er sket en fejl, og du blev ikke logget ind.
            @if (signInResult == SignInResult.InvalidEmailOrPassword)
            {
                <text>Du har brugt en forkert mail eller adgangskode. <a href="@Urls.ResetPassword">Vi kan sende dig en mail, så du kan få en ny adgangskode.</a></text>
            }
            else if (signInResult == SignInResult.LockedOut)
            {
                <text>Din konto er blevet midlertidig låst i fem minutter fordi der har været for mange mislykkede forsøg på at logge ind.</text>
            }
            <CloseButton Clicked="@DismissErrorAlert" />
        </Alert>
        <Form>
            <Validations @ref="validations" Mode="ValidationMode.Manual" Model="@request">
                <Field>
                    <FieldLabel>Mail</FieldLabel>
                    <FieldBody>
                        <Validation>
                            <TextEdit @ref="emailTextEdit" Role="TextRole.Email" @bind-Text="@request.Email">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Validation>
                    </FieldBody>
                </Field>
                <Field>
                    <FieldLabel>Adgangskode</FieldLabel>
                    <FieldBody>
                        <Validation>
                            <TextEdit Role="TextRole.Password" @bind-Text="@request.Password">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Validation>
                    </FieldBody>
                </Field>
                <Field>
                    <Check @bind-Checked="@request.IsPersistent">Husk mig</Check>
                </Field>
                <Button Color="Color.Primary" Type="ButtonType.Submit" PreventDefaultOnSubmit="true" Clicked="@Submit" class="btn-fixed">Log ind</Button>
            </Validations>
        </Form>
    </Container>
    <Container>
        <Paragraph>Hvis du ikke har en bruger kan du oprette dig.</Paragraph>
        <Button Color="Color.Secondary" Clicked="@SignUp" class="btn-fixed">Opret bruger</Button>
    </Container>
</main>

@code {

    private readonly SignInRequest request = new SignInRequest();
    private Validations validations = null!;
    private TextEdit emailTextEdit = null!;
    private bool showErrorAlert;
    private SignInResult signInResult;

    protected override void OnInitialized()
    {
        Task.Run(() => emailTextEdit.Focus());
    }

    private async Task Submit()
    {
        if (!validations.ValidateAll())
            return;

        validations.ClearAll();
        DismissErrorAlert();

        var maybe = await ApiClient.PostJsonAsync<SignInResponse>("user/sign-in", request);
        if (maybe.TryGetValue(out var response))
        {
            if (response.Result == SignInResult.Success)
            {
                AuthenticationStateProvider.UpdateUser(response.User!);
                ApplicationState.ResetStateAfterSignIn();
                if (ApplicationState.RedirectUrl != null)
                {
                    var redirectUrl = ApplicationState.RedirectUrl;
                    ApplicationState.RedirectUrl = null;
                    NavigationManager.NavigateTo(redirectUrl);
                }
                else
                {
                    NavigationManager.NavigateTo(string.Empty);
                }
            }
            signInResult = response.Result;
        }
        showErrorAlert = true;
    }

    private void DismissErrorAlert() => showErrorAlert = false;

    private void SignUp() => NavigationManager.NavigateTo(Urls.SignUp);

}
