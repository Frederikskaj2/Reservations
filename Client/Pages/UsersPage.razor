@page "/brugere"
@attribute [Authorize(Roles = Roles.Administrator)]
@inject ApiClient ApiClient
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject FormattingService FormattingService

<main>
    @if (!isInitialized)
    {
        <Spinner />
    }
    else
    {
        <Container>
            <Alert Color="Color.Danger" Visible="@showGeneralErrorAlert" Dismisable="true">
                Der er sket en fejl, og din ændring blev ikke gemt.
                <CloseButton Clicked="@DismissShowGeneralErrorAlert" />
            </Alert>
            <Table>
                <TableHeader>
                    <TableRow>
                        <TableHeaderCell>Mail</TableHeaderCell>
                        <TableHeaderCell>Navn</TableHeaderCell>
                        <TableHeaderCell>Telefon</TableHeaderCell>
                        <TableHeaderCell class="text-center">Bestillinger</TableHeaderCell>
                        <TableHeaderCell class="text-center">Email bekræftet</TableHeaderCell>
                        <TableHeaderCell class="text-center">Administrator</TableHeaderCell>
                        <TableHeaderCell class="text-center">Sletning ønsket</TableHeaderCell>
                        <TableHeaderCell></TableHeaderCell>
                    </TableRow>
                </TableHeader>
                <TableBody>
                    @foreach (var user in users!)
                    {
                        <TableRow @key="@user.Id">
                            <TableRowCell><a href="mailto:@user.Email?subject=Frederikskaj 2">@FormattingService.FormatMail(user.Email)</a></TableRowCell>
                            <TableRowCell>@user.FullName</TableRowCell>
                            <TableRowCell>@FormattingService.FormatPhone(user.Phone)</TableRowCell>
                            <TableRowCell class="text-center">@(user.OrderCount > 0 ? user.OrderCount.ToString() : string.Empty)</TableRowCell>
                            <TableRowCell class="text-center">
                                @if (@user.IsEmailConfirmed)
                                {
                                    <Icon class="fa-check" />
                                }
                            </TableRowCell>
                            <TableRowCell class="text-center">
                                @if (@user.IsAdministrator)
                                {
                                    <Icon class="fa-check" />
                                }
                            </TableRowCell>
                            <TableRowCell class="text-center">
                                @if (@user.IsPendingDelete)
                                {
                                    <Icon class="fa-check" />
                                }
                            </TableRowCell>
                            <TableRowCell>
                                <Dropdown>
                                    <DropdownToggle Color="Color.Light" />
                                    <DropdownMenu>
                                        <DropdownItem Clicked="@(() => Edit(user))">Redigér</DropdownItem>
                                        @if (!user.IsAdministrator)
                                        {
                                            <DropdownItem Clicked="@(() => MakeAdministrator(user))">Gør til administrator</DropdownItem>
                                        }
                                        else if (user.IsAdministrator && user.Id != currentUserId)
                                        {
                                            <DropdownItem Clicked="@(() => MakeNormalUser(user))">Gør til almindelig bruger</DropdownItem>
                                        }
                                        @if (!user.IsPendingDelete && user.Id != currentUserId)
                                        {
                                            <DropdownItem Clicked="@(() => Delete(user))">Slet</DropdownItem>
                                        }
                                    </DropdownMenu>
                                </Dropdown>
                            </TableRowCell>
                        </TableRow>
                    }
                </TableBody>
            </Table>
            <EditUserDialog @ref="editUserDialog" OnConfirm="OnEditUser" />
            <ConfirmDeleteUserDialog @ref="confirmDeleteUserDialog" OnConfirm="OnConfirmDeleteUser" />
        </Container>
    }
</main>

@code {

    private EditUserDialog editUserDialog = null!;
    private ConfirmDeleteUserDialog confirmDeleteUserDialog = null!;
    private bool isInitialized;
    private int? currentUserId;
    private List<User>? users;
    private bool showGeneralErrorAlert;

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        currentUserId = authenticationState.User.Id();
        var maybe = await ApiClient.GetJsonAsync<IEnumerable<User>>("users");
        users = maybe.TryGetValue(out var response) ? response.ToList() : new List<User>();
        isInitialized = true;
    }

    private void Edit(User user) => editUserDialog.Show(user, user.Id != currentUserId);

    private Task MakeAdministrator(User user) => PatchUser(user, true, null);

    private Task MakeNormalUser(User user) => PatchUser(user, false, null);

    private void Delete(User user) => confirmDeleteUserDialog.Show(user);

    private void DismissShowGeneralErrorAlert() => showGeneralErrorAlert = false;

    private Task OnEditUser((int UserId, UpdateUserRequest Request) tuple) => PatchUser(tuple.UserId, tuple.Request);

    private Task OnConfirmDeleteUser(User user) => PatchUser(user, null, true);

    private async Task PatchUser(User user, bool? isAdministrator, bool? isPendingDelete)
    {
        var request = new UpdateUserRequest
        {
            FullName = user.FullName!,
            Phone = user.Phone!,
            IsAdministrator = isAdministrator ?? user.IsAdministrator,
            IsPendingDelete = isPendingDelete ?? user.IsPendingDelete
        };
        await PatchUser(user.Id, request);
    }

    private async Task PatchUser(int userId, UpdateUserRequest request)
    {
        var requestUri = $"users/{userId}";
        var maybe = await ApiClient.PatchJsonAsync<UpdateUserResponse>(requestUri, request);
        if (maybe.TryGetValue(out var response))
        {
            switch (response.Result)
            {
                case UpdateUserResult.Success:
                    UpdateUser(response.User!);
                    return;
                case UpdateUserResult.UserWasDeleted:
                    RemoveUser(userId);
                    return;
            }
        }

        showGeneralErrorAlert = true;
    }

    private void UpdateUser(User user)
    {
        var index = users!.FindIndex(u => u.Id == user.Id);
        users[index] = user;
    }

    private void RemoveUser(int userId)
    {
        var index = users!.FindIndex(u => u.Id == userId);
        users.RemoveAt(index);
    }
}
