@page "/bestillinger"
@attribute [Authorize(Roles = Roles.Administrator)]
@inject ApiClient ApiClient
@inject IDateProvider DateProvider
@inject FormattingService FormattingService
@inject ReservationsOptions ReservationsOptions

<main>
    @if (!isInitialized)
    {
        <Spinner />
    }
    else
    {
        <Container>
            <Alert Color="Color.Danger" Visible="@showGeneralErrorAlert" Dismisable="true">
                Der er sket en fejl, og din ændring blev ikke gemt.
                <CloseButton Clicked="@DismissShowGeneralErrorAlert" />
            </Alert>
            <Table>
                <TableHeader>
                    <TableRow>
                        <TableHeaderCell>Betilling</TableHeaderCell>
                        <TableHeaderCell>Dato</TableHeaderCell>
                        <TableHeaderCell>Mail</TableHeaderCell>
                        <TableHeaderCell>Navn</TableHeaderCell>
                        <TableHeaderCell>Telefon</TableHeaderCell>
                        <TableHeaderCell>Konto</TableHeaderCell>
                        <TableHeaderCell>Mangler betaling</TableHeaderCell>
                        <TableHeaderCell></TableHeaderCell>
                    </TableRow>
                </TableHeader>
                <TableBody>
                    @foreach (var order in orders!)
                    {
                        var isUnpaid = order.Reservations.Any(reservation => reservation.Status == ReservationStatus.Reserved);
                        <TableRow @key="@order.Id">
                            <TableRowCell>@order.Id</TableRowCell>
                            <TableRowCell>@FormattingService.FormatDate(order.CreatedTimestamp)</TableRowCell>
                            <TableRowCell>@order.Mail</TableRowCell>
                            <TableRowCell>@order.FullName</TableRowCell>
                            <TableRowCell>@order.Phone</TableRowCell>
                            <TableRowCell>@order.AccountNumber</TableRowCell>
                            <TableRowCell>
                                @if (isUnpaid)
                                {
                                    if (GetIsUnpaidOrderOld(order))
                                    {
                                        <Icon class="fa-exclamation-triangle text-danger" />
                                    }
                                    else
                                    {
                                        <Icon class="fa-exclamation-triangle" />
                                    }
                                }
                            </TableRowCell>
                            <TableRowCell>
                                <Dropdown>
                                    <DropdownToggle Color="Color.Light" />
                                    <DropdownMenu>
                                        <DropdownItem Clicked="@(() => Edit(order))">Redigér</DropdownItem>
                                        @if (isUnpaid)
                                        {
                                            <DropdownItem Clicked="@(() => RecordPayIn(order))">Registrér indbetaling</DropdownItem>
                                        }
                                    </DropdownMenu>
                                </Dropdown>
                            </TableRowCell>
                        </TableRow>
                    }
                </TableBody>
            </Table>
        </Container>
        <PayInDialog @ref="payInDialog" OnConfirm="@OnPayInConfirm"/>
    }
</main>

@code {

    private PayInDialog payInDialog = null!;
    private bool isInitialized;
    private List<Order>? orders;
    private bool showGeneralErrorAlert;

    protected override async Task OnInitializedAsync()
    {
        var maybe = await ApiClient.GetJsonAsync<IEnumerable<Order>>("orders");
        orders = maybe.TryGetValue(out var response) ? response.ToList() : new List<Order>();
        isInitialized = true;
    }

    private void Edit(Order order)
    {
    }

    private void RecordPayIn(Order order) => payInDialog.Show(order);

    private async Task OnPayInConfirm((int OrderId, PaymentRequest Request) tuple)
    {
        var requestUri = $"orders/{tuple.OrderId}/pay-in";
        var maybe = await ApiClient.PostJsonAsync<OperationResponse>(requestUri, tuple.Request);
        // TODO: Handle error or update order.
    }

    private void DismissShowGeneralErrorAlert() => showGeneralErrorAlert = false;

    private bool GetIsUnpaidOrderOld(Order order)
    {
        var daysSinceOrderWasPlaced = -DateProvider.GetDaysFromToday(order.CreatedTimestamp);
        return daysSinceOrderWasPlaced > ReservationsOptions.HighlightUnpaidOrdersAfterDays;
    }
}
