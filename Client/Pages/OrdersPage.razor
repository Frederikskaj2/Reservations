@page "/bestillinger"
@attribute [Authorize(Roles = Roles.OrderHandling + "," + Roles.Payment + "," + Roles.Settlement)]
@inject ApiClient ApiClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ClientDataProvider ClientDataProvider
@inject IDateProvider DateProvider
@inject FormattingService FormattingService
@inject NavigationManager NavigationManager
@inject ReservationsOptions ReservationsOptions

<main>
    @if (!isInitialized)
    {
        <Spinner />
    }
    else
    {
        <Container>
            <Alert Color="Color.Danger" Visible="@showGeneralErrorAlert" Dismisable="true">
                Der er sket en fejl, og din ændring blev ikke gemt.
                <CloseButton Clicked="@DismissShowGeneralErrorAlert" />
            </Alert>
            <h1>Bestillinger</h1>
            @if (!orders!.Any())
            {
                <Paragraph>Der er intet at vise.</Paragraph>
            }
            else
            {
                <Table>
                    <TableHeader>
                        <TableRow>
                            <TableHeaderCell>Betillingsnr.</TableHeaderCell>
                            <TableHeaderCell>Dato</TableHeaderCell>
                            <TableHeaderCell>Næste reservation</TableHeaderCell>
                            <TableHeaderCell>Navn</TableHeaderCell>
                            <TableHeaderCell>Telefon</TableHeaderCell>
                            <TableHeaderCell class="text-center">Mangler betaling</TableHeaderCell>
                            <TableHeaderCell class="text-center">Mangler opgørelse</TableHeaderCell>
                            <TableHeaderCell></TableHeaderCell>
                        </TableRow>
                    </TableHeader>
                    <TableBody>
                        @foreach (var order in orders!)
                        {
                            var reservationsToSettle = order.Reservations
                                .Where(reservation => reservation.Status == ReservationStatus.Confirmed && DateProvider.GetDaysFromToday(reservation.Date) < 0)
                                .ToList();
                            <TableRow @key="@order.Id">
                                <TableHeaderCell>@order.Id</TableHeaderCell>
                                <TableRowCell>@FormattingService.FormatDate(order.CreatedTimestamp)</TableRowCell>
                                <TableRowCell>@FormattingService.FormatDate(order.Reservations.OrderBy(reservation => reservation.Date).First().Date)</TableRowCell>
                                <TableRowCell><a href="mailto:@order.Email?subject=Frederikskaj 2 bestilling @order.Id">@order.FullName</a></TableRowCell>
                                <TableRowCell>@order.Phone</TableRowCell>
                                <TableRowCell class="text-center">
                                    @if (order.Totals!.GetBalance() < 0)
                                    {
                                        if (GetIsUnpaidOrderOld(order))
                                        {
                                            <Icon class="fa-exclamation-triangle text-danger" />
                                        }
                                        else
                                        {
                                            <Icon class="fa-exclamation-triangle" />
                                        }
                                    }
                                </TableRowCell>
                                <TableRowCell class="text-center">
                                    @if (reservationsToSettle.Count > 0)
                                    {
                                        <Icon class="fa-exclamation-triangle" />
                                    }
                                </TableRowCell>
                                <TableRowCell>
                                    <Dropdown class="float-right">
                                        <DropdownToggle Color="Color.Light" Size="ButtonSize.Small" />
                                        <DropdownMenu>
                                            <DropdownItem Clicked="@(() => ShowOrder(order.Id))">Vis</DropdownItem>
                                            @if (canHandlePayments && order.Totals!.GetBalance() < 0)
                                            {
                                                <DropdownItem Clicked="@(() => RecordPayIn(order))">Registrér indbetaling</DropdownItem>
                                            }
                                            @if (canHandleSettlements)
                                            {
                                                foreach (var reservation in reservationsToSettle)
                                                {
                                                    <DropdownItem Clicked="@(() => RecordSettlement(order, reservation))">Lav opgørelse @resources![reservation.ResourceId].Name @FormattingService.FormatDate(reservation.Date)</DropdownItem>
                                                }
                                            }
                                        </DropdownMenu>
                                    </Dropdown>
                                </TableRowCell>
                            </TableRow>
                        }
                    </TableBody>
                </Table>
            }
            @if (canHandleOrders)
            {
                <h1>Bestillinger til grundejerforeningen</h1>
                @if (!ownerOrders!.Any())
                {
                    <Paragraph>Der er intet at vise.</Paragraph>
                }
                else
                {
                    <Table>
                        <TableHeader>
                            <TableRow>
                                <TableHeaderCell>Betillingsnr.</TableHeaderCell>
                                <TableHeaderCell>Dato</TableHeaderCell>
                                <TableHeaderCell>Oprettet af</TableHeaderCell>
                                <TableHeaderCell></TableHeaderCell>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            @foreach (var order in ownerOrders!)
                            {
                                <TableRow @key="@order.Id">
                                    <TableHeaderCell>@order.Id</TableHeaderCell>
                                    <TableRowCell>@FormattingService.FormatDate(order.CreatedTimestamp)</TableRowCell>
                                    <TableRowCell>
                                        @if (order.CreatedByEmail != null)
                                        {
                                            <a href="mailto:@order.CreatedByEmail?subject=Frederikskaj 2 bestilling @order.Id">@order.CreatedByName</a>
                                        }
                                        else
                                        {
                                            <text>(Slettet)</text>
                                        }
                                    </TableRowCell>
                                    <TableRowCell>
                                        <Button class="float-right" Color="Color.Light" Size="ButtonSize.Small" Clicked="@(() => ShowOrder(order.Id))">Vis</Button>
                                    </TableRowCell>
                                </TableRow>
                            }
                        </TableBody>
                    </Table>
                }
            }
        </Container>
    }
</main>
@if (canHandlePayments)
{
    <PayInDialog @ref="payInDialog" OnConfirm="@OnPaymentConfirm" />
}
@if (canHandleSettlements)
{
    <SettlementDialog @ref="settlementDialog" OnConfirm="@OnSettlementConfirm" />
}

@code {

    private PayInDialog payInDialog = null!;
    private SettlementDialog settlementDialog = null!;
    private bool canHandleOrders;
    private bool canHandlePayments;
    private bool canHandleSettlements;
    private IReadOnlyDictionary<int, Resource>? resources;
    private bool isInitialized;
    private List<Order>? orders;
    private List<OwnerOrder>? ownerOrders;
    private bool showGeneralErrorAlert;

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        canHandleOrders = authenticationState.User.IsInRole(Roles.OrderHandling);
        canHandlePayments = authenticationState.User.IsInRole(Roles.Payment);
        canHandleSettlements = authenticationState.User.IsInRole(Roles.Settlement);

        resources = await ClientDataProvider.GetResources();

        var maybeOrders = await ApiClient.GetJsonAsync<IEnumerable<Order>>("orders");
        orders = maybeOrders.TryGetValue(out var ordersResponse) ? ordersResponse.ToList() : new List<Order>();
        if (canHandleOrders)
        {
            var maybeOwnerOrders = await ApiClient.GetJsonAsync<IEnumerable<OwnerOrder>>("owner-orders");
            ownerOrders = maybeOwnerOrders.TryGetValue(out var ownerOrdersReponse) ? ownerOrdersReponse.ToList() : new List<OwnerOrder>();
        }

        isInitialized = true;
    }

    private void ShowOrder(int orderId) => NavigationManager.NavigateTo($"{Urls.Orders}/{orderId}");

    private void RecordPayIn(Order order)
    {
        DismissShowGeneralErrorAlert();
        payInDialog.Show(order.Id, DateProvider.Today, -order.Totals!.GetBalance());
    }

    private void RecordSettlement(Order order, Reservation reservation)
    {
        DismissShowGeneralErrorAlert();
        settlementDialog.Show(order.Id, reservation);
    }

    private async Task OnPaymentConfirm((int OrderId, LocalDate Date, int Amount) tuple)
    {
        var request = new PaymentRequest { Date = tuple.Date, Amount = tuple.Amount };
        var requestUri = $"orders/{tuple.OrderId}/pay-in";
        var maybe = await ApiClient.PostJsonAsync<OrderResponse<Order>>(requestUri, request);
        if (maybe.TryGetValue(out var response) && response.Order != null)
            UpdateOrder(response.Order);
        else
            showGeneralErrorAlert = true;
    }

    private async Task OnSettlementConfirm((int OrderId, SettleReservationRequest Request) tuple)
    {
        var requestUri = $"orders/{tuple.OrderId}/settle";
        var maybe = await ApiClient.PostJsonAsync<OrderResponse<Order>>(requestUri, tuple.Request);
        if (maybe.TryGetValue(out var response) && response.Order != null)
            UpdateOrder(response.Order);
        else
            showGeneralErrorAlert = true;
    }

    private void UpdateOrder(Order order)
    {
        var index = orders!.FindIndex(o => o.Id == order.Id);
        if (!order.IsHistoryOrder)
            orders[index] = order;
        else
            orders.RemoveAt(index);
    }

    private void DismissShowGeneralErrorAlert() => showGeneralErrorAlert = false;

    private bool GetIsUnpaidOrderOld(Order order)
    {
        var daysSinceOrderWasPlaced = -DateProvider.GetDaysFromToday(order.CreatedTimestamp);
        return daysSinceOrderWasPlaced >= ReservationsOptions.PaymentDeadlineInDays;
    }
}
