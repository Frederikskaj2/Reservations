@page "/bestillinger"
@attribute [Authorize(Roles = Roles.Administrator)]
@inject ApiClient ApiClient
@inject ClientDataProvider ClientDataProvider
@inject IDateProvider DateProvider
@inject FormattingService FormattingService
@inject NavigationManager NavigationManager
@inject ReservationsOptions ReservationsOptions

    <main>
        @if (!isInitialized)
        {
            <Spinner />
        }
        else
        {
            <Container>
                <Alert Color="Color.Danger" Visible="@showGeneralErrorAlert" Dismisable="true">
                    Der er sket en fejl, og din ændring blev ikke gemt.
                    <CloseButton Clicked="@DismissShowGeneralErrorAlert" />
                </Alert>
                <Table>
                    <TableHeader>
                        <TableRow>
                            <TableHeaderCell>Betilling</TableHeaderCell>
                            <TableHeaderCell>Dato</TableHeaderCell>
                            <TableHeaderCell>Navn</TableHeaderCell>
                            <TableHeaderCell>Telefon</TableHeaderCell>
                            <TableHeaderCell class="text-center">Mangler betaling</TableHeaderCell>
                            <TableHeaderCell class="text-center">Mangler opgørelse</TableHeaderCell>
                            <TableHeaderCell></TableHeaderCell>
                        </TableRow>
                    </TableHeader>
                    <TableBody>
                        @foreach (var order in orders!)
                        {
                            var isUnpaid = order.Reservations.Any(reservation => reservation.Status == ReservationStatus.Reserved);
                            var reservationsToSettle = order.Reservations.Where(reservation => reservation.Status == ReservationStatus.Confirmed && DateProvider.GetDaysFromToday(reservation.Date) < 0).ToList();
                            <TableRow @key="@order.Id">
                                <TableRowCell>@order.Id</TableRowCell>
                                <TableRowCell>@FormattingService.FormatDate(order.CreatedTimestamp)</TableRowCell>
                                <TableRowCell><a href="mailto:@order.Mail?subject=Frederikskaj 2 bestilling @order.Id">@order.FullName</a></TableRowCell>
                                <TableRowCell>@order.Phone</TableRowCell>
                                <TableRowCell class="text-center">
                                    @if (isUnpaid)
                                    {
                                        if (GetIsUnpaidOrderOld(order))
                                        {
                                            <Icon class="fa-exclamation-triangle text-danger" />
                                        }
                                        else
                                        {
                                            <Icon class="fa-exclamation-triangle" />
                                        }
                                    }
                                </TableRowCell>
                                <TableRowCell class="text-center">
                                    @if (reservationsToSettle.Count > 0)
                                    {
                                        <Icon class="fa-exclamation-triangle" />
                                    }
                                </TableRowCell>
                                <TableRowCell>
                                    <Dropdown>
                                        <DropdownToggle Color="Color.Light" />
                                        <DropdownMenu>
                                            <DropdownItem Clicked="@(() => ShowOrder(order))">Vis</DropdownItem>
                                            @if (isUnpaid)
                                            {
                                                <DropdownItem Clicked="@(() => RecordPayIn(order))">Registrér indbetaling</DropdownItem>
                                            }
                                            @foreach (var reservation in reservationsToSettle)
                                            {
                                                <DropdownItem Clicked="@(() => RecordSettlement(order, reservation))">Lav opgørelse @resources![reservation.ResourceId].Name @FormattingService.FormatDate(reservation.Date)</DropdownItem>
                                            }
                                        </DropdownMenu>
                                    </Dropdown>
                                </TableRowCell>
                            </TableRow>
                        }
                    </TableBody>
                </Table>
            </Container>
            <PayInDialog @ref="payInDialog" OnConfirm="@OnPayInConfirm" />
            <SettlementDialog @ref="settlementDialog" OnConfirm="@OnSettlementConfirm" />
        }
    </main>

@code {

    private PayInDialog payInDialog = null!;
    private SettlementDialog settlementDialog = null!;
    private IReadOnlyDictionary<int, Resource>? resources;
    private bool isInitialized;
    private List<Order>? orders;
    private bool showGeneralErrorAlert;

    protected override async Task OnInitializedAsync()
    {
        resources = await ClientDataProvider.GetResources();
        var maybe = await ApiClient.GetJsonAsync<IEnumerable<Order>>("orders");
        orders = maybe.TryGetValue(out var response) ? response.ToList() : new List<Order>();
        isInitialized = true;
    }

    private void ShowOrder(Order order) => NavigationManager.NavigateTo($"bestillinger/{order.Id}");

    private void RecordPayIn(Order order) => payInDialog.Show(order);

    private void RecordSettlement(Order order, Reservation reservation) => settlementDialog.Show(order, reservation);

    private async Task OnPayInConfirm((int OrderId, PaymentRequest Request) tuple)
    {
        var requestUri = $"orders/{tuple.OrderId}/pay-in";
        var maybe = await ApiClient.PostJsonAsync<OrderResponse>(requestUri, tuple.Request);
        if (maybe.TryGetValue(out var response) && response.Order != null)
            UpdateOrder(response.Order);
        else
            showGeneralErrorAlert = true;
    }

    private async Task OnSettlementConfirm((int OrderId, SettleReservationRequest Request) tuple)
    {
        var requestUri = $"orders/{tuple.OrderId}/settle";
        var maybe = await ApiClient.PostJsonAsync<OrderResponse>(requestUri, tuple.Request);
        if (maybe.TryGetValue(out var response) && response.Order != null)
            UpdateOrder(response.Order);
        else
            showGeneralErrorAlert = true;
    }

    private void UpdateOrder(Order order)
    {
        var index = orders!.FindIndex(o => o.Id == order.Id);
        orders[index] = order;
    }

    private void DismissShowGeneralErrorAlert() => showGeneralErrorAlert = false;

    private bool GetIsUnpaidOrderOld(Order order)
    {
        var daysSinceOrderWasPlaced = -DateProvider.GetDaysFromToday(order.CreatedTimestamp);
        return daysSinceOrderWasPlaced > ReservationsOptions.HighlightUnpaidOrdersAfterDays;
    }
}
