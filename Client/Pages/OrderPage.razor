@page "/bestillinger/{orderId:int}"
@inject ApiClient ApiClient
@inject ClientDataProvider ClientDataProvider
@inject FormattingService FormattingService
@inject NavigationManager NavigationManager
@inject ReservationsOptions ReservationsOptions

<main>
    @if (!isInitialized)
    {
        <Spinner />
    }
    else if (order != null)
    {
        <Container class="container-min-md">
            <Alert Color="Color.Danger" Visible="@showErrorAlert" Dismisable="true">
                Der er sket en fejl. Din bestilling blev ikke opdateret.
                <CloseButton Clicked="@DismissErrorAlert" />
            </Alert>
            <h1>Bestilling @order!.Id</h1>
            <Validations @ref="validations" Mode="ValidationMode.Manual" Model="@request">
                <Row>
                    <Column ColumnSize="ColumnSize.Is9.OnTablet.IsHalf.OnWidescreen">
                        <Field>
                            <FieldLabel>Kontonummer (til udbetaling af depositum)</FieldLabel>
                            <FieldBody>
                                <Validation>
                                    <TextEdit InputMode="TextInputMode.Numeric" @bind-Text="@request.AccountNumber" placeholder="1111-2222333344 eller DK1234567890123456">
                                        <Feedback>
                                            <ValidationError />
                                        </Feedback>
                                    </TextEdit>
                                </Validation>
                            </FieldBody>
                        </Field>
                    </Column>
                </Row>
                <Table>
                    <TableHeader>
                        <TableRow>
                            <TableHeaderCell>Lokale</TableHeaderCell>
                            <TableHeaderCell>Fra</TableHeaderCell>
                            <TableHeaderCell>Dage</TableHeaderCell>
                            <TableHeaderCell>Til</TableHeaderCell>
                            <TableHeaderCell class="text-right">Leje</TableHeaderCell>
                            <TableHeaderCell class="text-right">Rengøring</TableHeaderCell>
                            <TableHeaderCell class="text-right">Depositum</TableHeaderCell>
                        </TableRow>
                    </TableHeader>
                    <TableBody>
                        @foreach (var reservation in order.Reservations!)
                        {
                            var isCancelled = request.CancelledReservations.Contains(reservation.Id);
                            <TableRow class="@(isCancelled || reservation.Status == ReservationStatus.Cancelled ? "reservation-cancelled" : string.Empty)">
                                <TableRowCell>@resources![reservation.ResourceId].Name</TableRowCell>
                                <TableRowCell>@FormattingService.FormatCheckInTimeShort(reservation.Date)</TableRowCell>
                                <TableRowCell>@reservation.DurationInDays</TableRowCell>
                                <TableRowCell>@FormattingService.FormatCheckOutTimeShort(reservation.Date.PlusDays(reservation.DurationInDays))</TableRowCell>
                                <TableRowCell class="text-right">@FormattingService.FormatMoneyShort(reservation.Price!.Rent)</TableRowCell>
                                <TableRowCell class="text-right">@FormattingService.FormatMoneyShort(reservation.Price!.CleaningFee)</TableRowCell>
                                <TableRowCell class="text-right">@FormattingService.FormatMoneyShort(reservation.Price!.Deposit)</TableRowCell>
                                <TableRowCell class="border-0">
                                    @if (reservation.CanBeCancelled)
                                    {
                                        <Button Color="Color.Light" Size="ButtonSize.Small" Clicked="@(() => ToggleCancelReservation(reservation))">
                                            @if (!isCancelled)
                                            {
                                                <Icon Name="IconName.Delete" class="text-danger" />
                                            }
                                            else
                                            {
                                                <Icon class="fa-undo text-success" />
                                            }
                                        </Button>
                                    }
                                </TableRowCell>
                            </TableRow>
                        }
                    </TableBody>
                    <TableFooter>
                        <TableRow>
                            <TableRowCell colspan="6">Leje (inkl. rengøring)</TableRowCell>
                            <TableRowCell class="text-right">@FormattingService.FormatMoneyLong(price!.Rent + price!.CleaningFee)</TableRowCell>
                        </TableRow>
                        <TableRow>
                            <TableRowCell colspan="6" class="border-top-0">Depositum</TableRowCell>
                            <TableRowCell class="text-right border-top-0">@FormattingService.FormatMoneyLong(price!.Deposit)</TableRowCell>
                        </TableRow>
                        @if (price!.CancellationFee > decimal.Zero)
                        {
                            <TableRow>
                                <TableRowCell colspan="6" class="border-top-0">Afbestillingsgebyr</TableRowCell>
                                <TableRowCell class="text-right border-top-0">@FormattingService.FormatMoneyLong(price!.CancellationFee)</TableRowCell>
                            </TableRow>
                        }
                        <TableRow>
                            <TableRowCell colspan="6" class="border-bottom"><strong>Til betaling</strong></TableRowCell>
                            <TableRowCell class="text-right border-bottom"><strong>@FormattingService.FormatMoneyLong(price!.GetTotal())</strong></TableRowCell>
                        </TableRow>
                        <TableRow>
                            <TableRowCell colspan="7" class="border-top-0">
                                <Button class="float-right" Color="@(request.CancelledReservations.Count > 0 ? Color.Danger : Color.Primary)" IsDisabled="@(!IsUpdated)" Clicked="@Submit">Opdatér bestilling</Button>
                            </TableRowCell>
                        </TableRow>
                    </TableFooter>
                </Table>
            </Validations>
        </Container>
    }
    else
    {
        <Container>
            <Text>Bestilling @OrderId er ikke tilgængelig.</Text>
        </Container>
    }
</main>

@code {

    private readonly UpdateOrderRequest request = new UpdateOrderRequest();
    private Validations validations = null!;
    IReadOnlyDictionary<int, Resource>? resources;
    private Order? order;
    private Price? price;
    private bool isInitialized;
    private bool showErrorAlert;

    [Parameter]
    public int OrderId { get; set; }

    private bool IsUpdated => order?.AccountNumber != request.AccountNumber.Trim() || request.CancelledReservations.Count > 0;

    protected override async Task OnInitializedAsync()
    {
        resources = await ClientDataProvider.GetResources();
        var url = $"orders/{OrderId}";
        var maybe = await ApiClient.GetJsonAsync<Order>(url);
        if (maybe.TryGetValue(out var value) || value.Id != 0)
        {
            order = value;
            request.AccountNumber = order.AccountNumber!;
            UpdatePrice();
        }
        isInitialized = true;
    }

    private void ToggleCancelReservation(Reservation reservation)
    {
        if (!request.CancelledReservations.Contains(reservation.Id))
            request.CancelledReservations.Add(reservation.Id);
        else
            request.CancelledReservations.Remove(reservation.Id);
        UpdatePrice();
    }

    private void UpdatePrice()
    {
        price = order!.Reservations.Aggregate(
            new Price(),
            (accumulator, reservation) => accumulator.Accumulate(GetPrice(reservation)));

        Price GetPrice(Reservation reservation)
        {
            if (!request.CancelledReservations.Contains(reservation.Id))
                return reservation.Price!;
            return reservation.Status == ReservationStatus.Confirmed
                ? new Price { Deposit = reservation.Price!.Deposit, CancellationFee = ReservationsOptions.CancellationFee }
                : new Price();
        }
    }

    private async Task Submit()
    {
        if (!validations.ValidateAll())
            return;

        validations.ClearAll();

        var url = $"orders/{order!.Id}";
        var maybe = await ApiClient.PatchJsonAsync<OperationResponse>(url, request);
        if (maybe.TryGetValue(out var response) && response.Result == OperationResult.Success)
            NavigationManager.NavigateTo(Urls.Orders);
        showErrorAlert = true;
    }

    private void DismissErrorAlert() => showErrorAlert = false;

}
