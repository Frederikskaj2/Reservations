@if (isInitialized)
{
    <form>
        <Validations @ref="validations" Mode="ValidationMode.Manual">
            @if (!IsHistoryOrder)
            {
                <Row>
                    <Column ColumnSize="ColumnSize.Is9.OnTablet.IsHalf.OnWidescreen">
                        <AccountNumberEditor @bind-Value="accountNumber" Disabled="@(!CanEditOrder)"/>
                    </Column>
                </Row>
                @if (now <= NoFeeCancellationIsAllowedBefore && CanWaiveFee)
                {
                    <Row>
                        <Column>Brugeren kan aflyse uden gebyr @Formatter.FormatHumanizedFutureTime(now, NoFeeCancellationIsAllowedBefore.Value).</Column>
                    </Row>
                }
            }
            <Table>
                <TableHeader>
                    <TableRow>
                        <TableHeaderCell Class="order-table-resource-column">Lokale</TableHeaderCell>
                        <TableHeaderCell Class="order-table-time-column">Fra</TableHeaderCell>
                        <TableHeaderCell>Nætter</TableHeaderCell>
                        <TableHeaderCell Class="order-table-time-column">Til</TableHeaderCell>
                        <TableHeaderCell Class="text-end">Leje</TableHeaderCell>
                        <TableHeaderCell Class="text-end">Rengøring</TableHeaderCell>
                        <TableHeaderCell Class="text-end">Depositum</TableHeaderCell>
                    </TableRow>
                </TableHeader>
                <TableBody>
                    @{
                        var reservationIndex = 0;
                        foreach (var reservation in Reservations)
                        {
                            var index = reservationIndex;
                            var isCancelled = cancelledReservations.Contains(index);
                            var color = reservation.Status is ReservationStatus.Settled && !IsHistoryOrder ? "text-secondary" : "";
                            var cancelledClass = isCancelled || reservation.Status is ReservationStatus.Abandoned or ReservationStatus.Cancelled
                                ? "reservation-cancelled"
                                : "";
                            var canBeSettled = reservation.Status is ReservationStatus.Confirmed && reservation.Extent.Ends() <= DateProvider.Today;
                            <TableRow Class="@color">
                                <TableRowCell Class="@cancelledClass">@resources![reservation.ResourceId].Name</TableRowCell>
                                <TableRowCell Class="@cancelledClass">@Formatter.FormatCheckInTimeShort(options!, reservation.Extent.Date)</TableRowCell>
                                <TableRowCell Class="@cancelledClass">@reservation.Extent.Nights</TableRowCell>
                                <TableRowCell Class="@cancelledClass">
                                    @Formatter.FormatCheckOutTimeShort(options!, reservation.Extent.Date.PlusDays(reservation.Extent.Nights))
                                </TableRowCell>
                                <TableRowCell Class="@("text-end " + cancelledClass)">@Formatter.FormatMoneyShort(reservation.Price!.Rent)</TableRowCell>
                                <TableRowCell Class="@("text-end " + cancelledClass)">@Formatter.FormatMoneyShort(reservation.Price!.Cleaning)</TableRowCell>
                                <TableRowCell Class="@("text-end " + cancelledClass)">@Formatter.FormatMoneyShort(reservation.Price!.Deposit)</TableRowCell>
                                <TableRowCell Class="border-0">
                                    @if (CanEditOrder && canBeSettled)
                                    {
                                        <Button Color="Color.Light" Size="Size.Small" Clicked="() => SettleReservation(index)">
                                            <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Handshake"/>
                                        </Button>
                                    }
                                    @if (CanEditOrder && reservation.CanBeCancelled)
                                    {
                                        <Button Color="Color.Light" Size="Size.Small" Clicked="() => ToggleCancelReservation(index)">
                                            @if (!isCancelled)
                                            {
                                                <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Trash" TextColor="TextColor.Danger"/>
                                            }
                                            else
                                            {
                                                <Icon Name="IconName.Undo" TextColor="TextColor.Success"/>
                                            }
                                        </Button>
                                    }
                                </TableRowCell>
                            </TableRow>
                            reservationIndex += 1;
                        }
                    }
                </TableBody>
                <TableFooter>
                    <TableRow>
                        <TableRowCell ColumnSpan="5">Leje (inklusiv rengøring)</TableRowCell>
                        <TableRowCell Class="text-end">+</TableRowCell>
                        <TableRowCell Class="text-end">@Formatter.FormatMoneyLong(price!.Rent + price!.Cleaning)</TableRowCell>
                    </TableRow>
                    <TableRow>
                        <TableRowCell ColumnSpan="5" Class="border-top-0">Depositum</TableRowCell>
                        <TableRowCell Class="text-end border-top-0">+</TableRowCell>
                        <TableRowCell Class="text-end border-top-0">@Formatter.FormatMoneyLong(price!.Deposit)</TableRowCell>
                    </TableRow>
                    <TableRow>
                        <TableRowCell ColumnSpan="5" Class="border-bottom">
                            <strong>Til betaling</strong>
                        </TableRowCell>
                        <TableRowCell Class="text-end border-bottom">
                            <strong>=</strong>
                        </TableRowCell>
                        <TableRowCell Class="text-end border-bottom">
                            <strong>@Formatter.FormatMoneyLong(price!.Total())</strong>
                        </TableRowCell>
                    </TableRow>
                    @if (!IsHistoryOrder)
                    {
                        <TableRow>
                            <TableRowCell ColumnSpan="5" Class="border-top-0 control-row">
                                @if (Reservations.Any(reservation => reservation.Status is ReservationStatus.Confirmed))
                                {
                                    var hasCancelledReservation = Reservations
                                        .Select((reservation, index) => (Reservation: reservation, Index: index))
                                        .Any(tuple => tuple.Reservation.Status is ReservationStatus.Confirmed && cancelledReservations.Contains(tuple.Index));
                                    if (hasCancelledReservation)
                                    {
                                        @if (CanWaiveFee)
                                        {
                                            <Check @bind-Checked="waiveFee" TValue="bool">Intet afbestillingsgebyr</Check>
                                        }
                                        else if (!(now <= NoFeeCancellationIsAllowedBefore))
                                        {
                                            <text>
                                                <strong class="text-danger">Bemærk:</strong> Et afbestillingsgebyr på
                                                <strong>@Formatter.FormatMoneyLong(options!.CancellationFee)</strong> trækkes fra dit tilgodehavende.
                                            </text>
                                        }
                                        else if (now <= NoFeeCancellationIsAllowedBefore)
                                        {
                                            <text>
                                                <strong class="text-danger">Bemærk:</strong> Du kan aflyse uden gebyr
                                                @Formatter.FormatHumanizedFutureTime(now, NoFeeCancellationIsAllowedBefore.Value).
                                            </text>
                                        }
                                    }
                                    else if (CanWaiveFee)
                                    {
                                        <Check @bind-Checked="allowCancellationWithoutFee" TValue="bool">Tillad afbestilling uden gebyr</Check>
                                    }
                                    else if (now <= NoFeeCancellationIsAllowedBefore)
                                    {
                                        <text>
                                            <strong class="text-danger">Bemærk:</strong> Du kan aflyse uden gebyr
                                            @Formatter.FormatHumanizedFutureTime(now, NoFeeCancellationIsAllowedBefore.Value).
                                        </text>
                                    }
                                }
                            </TableRowCell>
                            <TableRowCell ColumnSpan="2" Class="border-top-0">
                                <Button
                                    Class="float-end"
                                    Color="cancelledReservations.Count > 0 ? Color.Danger : Color.Primary"
                                    Type="@ButtonType.Submit"
                                    PreventDefaultOnSubmit="true"
                                    Disabled="@(!IsUpdated)"
                                    Clicked="Submit">
                                    Opdatér bestilling
                                </Button>
                            </TableRowCell>
                        </TableRow>
                    }
                </TableFooter>
            </Table>
        </Validations>
    </form>
}
